{"version":3,"sources":["webpack:///../packages/favorites/src/FavoriteHeart.js","webpack:///../packages/favorites/index.js","webpack:///../packages/favorites/src/FavoritesContext.js"],"names":["FavoriteHeart","id","name","onChange","onMouseDown","props","useFavorites","isFavorite","toggleFavorite","useToggle","tooltipOpen","toggleTooltip","loading","toggleLoading","icon","useMemo","onChangeHandler","e","role","tabIndex","className","preventDefault","onKeyPress","key","onClick","useEffectAsync","placement","trigger","delay","show","hide","target","isOpen","toggle","propTypes","PropTypes","string","isRequired","func","AV_INTERNAL_GLOBALS","FavoritesContext","createContext","validatedFavorites","input","validFavorites","reduce","result","favorite","isUndefined","pos","isNumber","push","sortBy","forEach","index","submitFavorites","newfavorites","favorites","avSettingsApi","setApplication","sendUpdate","faves","avMessages","send","event","openMaxModal","avLogMessagesApi","info","category","label","Favorites","children","useState","setFavorites","getFavorites","getApplication","get","subscribe","data","unsubscribe","deleteFavorite","clone","filter","newFavorites","addFavorite","length","maxFavorite","accum","fave","newData","isFavorited","find","Provider","value","node","useContext"],"mappings":"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","file":"10.e456d78c.iframe.bundle.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useToggle, useEffectAsync } from '@availity/hooks';\nimport { Tooltip } from 'reactstrap';\nimport { useFavorites } from './FavoritesContext';\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\nconst FavoriteHeart = ({ id, name, onChange, onMouseDown, ...props }) => {\n  const [isFavorite, toggleFavorite] = useFavorites(id);\n  const [tooltipOpen, toggleTooltip] = useToggle(false);\n  const [loading, toggleLoading] = useToggle(true);\n\n  const icon = useMemo(() => {\n    const onChangeHandler = (e) => {\n      toggleFavorite();\n\n      if (onChange) {\n        onChange(!isFavorite, e);\n      }\n    };\n\n    return (\n      <span\n        id={`av-favorite-heart-${id}`}\n        role=\"checkbox\"\n        aria-label={`Favorite ${name || ''}`}\n        aria-checked={isFavorite}\n        {...props}\n        tabIndex=\"0\"\n        className={`favorite-heart pt-4 ${isFavorite && 'active'}`}\n        onMouseDown={(e) => {\n          e.preventDefault();\n          if (onMouseDown) {\n            onMouseDown(e);\n          }\n        }}\n        onKeyPress={(e) => (e.key === ' ' || e.key === 'Enter') && onChangeHandler(e)}\n        onClick={onChangeHandler}\n      >\n        <span aria-hidden className=\"icon outline\" />\n        <span aria-hidden className=\"icon default-filled\" />\n        <span aria-hidden className=\"icon selected-filled\" />\n      </span>\n    );\n  }, [id, name, isFavorite, onMouseDown, props, onChange, toggleFavorite]);\n\n  useEffectAsync(async () => {\n    toggleLoading(false);\n  }, [id]);\n\n  return (\n    !loading && (\n      <>\n        {icon}\n        <Tooltip\n          id={`av-favorite-heart-${id}-tooltip`}\n          data-testid={`av-favorite-heart-${id}-tooltip`}\n          placement=\"top\"\n          trigger=\"hover\"\n          delay={{\n            show: 1500,\n            hide: 0,\n          }}\n          target={`av-favorite-heart-${id}`}\n          isOpen={tooltipOpen}\n          toggle={() => toggleTooltip()}\n        >\n          {isFavorite ? 'Remove From' : 'Add to'} My Favorites\n        </Tooltip>\n      </>\n    )\n  );\n};\n\nFavoriteHeart.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  onMouseDown: PropTypes.func,\n};\n\nexport default FavoriteHeart;\n","export { default as FavoriteHeart } from './src/FavoriteHeart';\nexport { default, useFavorites, FavoritesContext } from './src/FavoritesContext';\n","import React, { createContext, useContext, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useEffectAsync } from '@availity/hooks';\nimport avMessages from '@availity/message-core';\nimport get from 'lodash/get';\nimport isUndefined from 'lodash/isUndefined';\nimport isNumber from 'lodash/isNumber';\nimport sortBy from 'lodash/sortBy';\nimport reduce from 'lodash/reduce';\nimport clone from 'lodash/clone';\nimport find from 'lodash/find';\nimport { avSettingsApi, avLogMessagesApi } from '@availity/api-axios';\n\nconst MAX_FAVORITES = 60;\nconst NAV_APP_ID = 'Gateway-AvNavigation';\n\nconst AV_INTERNAL_GLOBALS = {\n  FAVORITES_UPDATE: 'av:favorites:update',\n  FAVORITES_CHANGED: 'av:favorites:changed',\n  MAX_FAVORITES: 'av:favorites:maxed',\n  MY_TOP_APPS_UPDATED: 'av:topApps:updated',\n};\n\nexport const FavoritesContext = createContext();\n\nconst validatedFavorites = (input) => {\n  const validFavorites = reduce(\n    input,\n    (result, favorite) => {\n      if (!isUndefined(favorite.id) && !isUndefined(favorite.pos) && isNumber(favorite.pos)) {\n        result.push(favorite);\n      }\n      return result;\n    },\n    []\n  );\n  sortBy(validFavorites, 'pos').forEach((favorite, index) => {\n    favorite.pos = index;\n  });\n\n  return validFavorites;\n};\n\nconst submitFavorites = async (newfavorites) => {\n  const favorites = validatedFavorites(newfavorites);\n\n  return avSettingsApi.setApplication(NAV_APP_ID, {\n    favorites,\n  });\n};\n\nconst sendUpdate = (faves) => {\n  avMessages.send({\n    favorites: faves,\n    event: AV_INTERNAL_GLOBALS.FAVORITES_UPDATE,\n  });\n};\n\nconst openMaxModal = () => {\n  const atMaxLog = {\n    category: 'favorites',\n    label: 'max-favorites-modal',\n    event: 'modal-open',\n  };\n\n  avLogMessagesApi.info(atMaxLog);\n\n  avMessages.send(AV_INTERNAL_GLOBALS.MAX_FAVORITES);\n};\n\nconst Favorites = ({ children }) => {\n  const [favorites, setFavorites] = useState([]);\n\n  const getFavorites = async () => {\n    const result = await avSettingsApi.getApplication(NAV_APP_ID);\n\n    setFavorites(get(result, 'data.settings[0].favorites') || []);\n  };\n\n  useEffectAsync(async () => {\n    avMessages.subscribe(AV_INTERNAL_GLOBALS.FAVORITES_CHANGED, (data) => {\n      setFavorites(get(data, 'favorites') || []);\n    });\n\n    await getFavorites();\n\n    return () => avMessages.unsubscribe(AV_INTERNAL_GLOBALS.FAVORITES_CHANGED);\n  }, []);\n\n  useEffectAsync(async () => {\n    avMessages.subscribe(AV_INTERNAL_GLOBALS.FAVORITES_UPDATE, (data) => {\n      setFavorites(get(data, 'favorites') || []);\n    });\n\n    return () => avMessages.unsubscribe(AV_INTERNAL_GLOBALS.FAVORITES_UPDATE);\n  }, []);\n\n  const deleteFavorite = async (id) => {\n    const result = await submitFavorites(clone(favorites).filter((favorite) => favorite.id !== id));\n\n    const newFavorites = get(result, 'data.favorites');\n    setFavorites(newFavorites);\n\n    sendUpdate(newFavorites);\n  };\n\n  const addFavorite = async (id) => {\n    if (favorites.length >= MAX_FAVORITES) {\n      openMaxModal();\n      return false;\n    }\n\n    const maxFavorite = favorites.reduce((accum, fave) => {\n      if (!accum || fave.pos > accum.pos) {\n        accum = fave;\n      }\n      return accum;\n    }, null);\n    const newData = clone(favorites);\n\n    newData.push({\n      id,\n      pos: maxFavorite ? maxFavorite.pos + 1 : 0,\n    });\n\n    const result = await submitFavorites(newData);\n\n    const newFavorites = get(result, 'data.favorites');\n    setFavorites(newFavorites);\n\n    sendUpdate(newFavorites);\n\n    const isFavorited = find(newFavorites, { id });\n\n    return !!isFavorited;\n  };\n\n  return (\n    <FavoritesContext.Provider value={{ favorites, deleteFavorite, addFavorite }}>{children}</FavoritesContext.Provider>\n  );\n};\n\nFavorites.propTypes = {\n  children: PropTypes.node,\n};\n\nexport const useFavorites = (id) => {\n  const { favorites, deleteFavorite, addFavorite } = useContext(FavoritesContext);\n\n  const isFavorited = useMemo(() => !!find(favorites, { id }), [favorites, id]);\n\n  const toggleFavorite = async () => (isFavorited ? deleteFavorite(id) : addFavorite(id));\n\n  return [isFavorited, toggleFavorite];\n};\n\nexport default Favorites;\n"],"sourceRoot":""}