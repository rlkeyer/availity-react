{"version":3,"sources":["webpack:///../packages/avatar/src/Avatar.js"],"names":["skeletonPropType","PropTypes","shape","width","oneOfType","string","number","height","Loader","skeletonProps","rest","propTypes","defaultProps","Avatar","fallback","props","useState","avatar","setAvatar","loading","setLoading","useEffectAsync","avSettingsApi","getApplication","resp","avi","get","src","alt","loader"],"mappings":"25GAQA,IAAMA,iBAAmBC,qBAAUC,MAAM,CACvCC,MAAOF,qBAAUG,UAAU,CAACH,qBAAUI,OAAQJ,qBAAUK,SACxDC,OAAQN,qBAAUG,UAAU,CAACH,qBAAUI,OAAQJ,qBAAUK,WAGrDE,cAAS,SAATA,OAAU,MAAD,IAAGC,cAAH,KAAGA,cAAkBC,KAArB,gDACb,gDAAUA,KAAV,UACE,wBAAC,cAAD,iBAAcD,oBAFZD,c,qBAMNA,cAAOG,UAAY,CACjBF,cAAeT,kBAGjBQ,cAAOI,aAAe,CACpBH,cAAe,CACbF,OAAQ,SAIZ,IAAMM,cAAS,SAATA,OAAU,OAA0C,IAAxCC,SAAwC,MAAxCA,SAAUL,cAA8B,MAA9BA,cAAkBM,MAAY,2CACxD,0BAA4BC,uBAASF,UAArC,GAAOG,OAAP,cAAeC,UAAf,cACA,0BAA8BF,wBAAS,GAAvC,GAAOG,QAAP,cAAgBC,WAAhB,cAYA,OAVAC,gBAAc,2CAAC,qJACbD,YAAW,GADE,gBAEME,MAAcC,eAAe,UAFnC,OAEPC,KAFO,cAIPC,IAAMC,cAAIF,KAAM,0BAA2BV,UAEjDI,UAAUO,KACVL,YAAW,GAPE,wDAQZ,IAECD,QACK,wBAAC,cAAD,eAAQ,cAAY,oBAAoBV,cAAeA,eAAmBM,QAIjF,wBAAC,QAAD,eACE,cAAY,aACZY,IAAKV,OACLW,IAAI,SACJC,OAAQ,wBAAC,cAAD,eAAQ,cAAY,aAAapB,cAAeA,eAAmBM,SACvEA,SAxBJF,c,qBA6BNA,cAAOF,UAAY,CACjBG,SAAUb,qBAAUI,OACpBI,cAAeT,kBAGjBa,cAAOD,aAAe,CACpBE,SAAU,iD,yTAGGD,6B","file":"16.a7f86bea.iframe.bundle.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\nimport { Img } from 'react-image';\nimport { useEffectAsync } from '@availity/hooks';\nimport { avSettingsApi } from '@availity/api-axios';\nimport get from 'lodash/get';\n\nconst skeletonPropType = PropTypes.shape({\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n});\n\nconst Loader = ({ skeletonProps, ...rest }) => (\n  <span {...rest}>\n    <Skeleton {...skeletonProps} />\n  </span>\n);\n\nLoader.propTypes = {\n  skeletonProps: skeletonPropType,\n};\n\nLoader.defaultProps = {\n  skeletonProps: {\n    height: '100%',\n  },\n};\n\nconst Avatar = ({ fallback, skeletonProps, ...props }) => {\n  const [avatar, setAvatar] = useState(fallback);\n  const [loading, setLoading] = useState(true);\n\n  useEffectAsync(async () => {\n    setLoading(true);\n    const resp = await avSettingsApi.getApplication('AVATAR');\n\n    const avi = get(resp, 'data.settings[0].avatar', fallback);\n\n    setAvatar(avi);\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return <Loader data-testid=\"avatar-img-loader\" skeletonProps={skeletonProps} {...props} />;\n  }\n\n  return (\n    <Img\n      data-testid=\"avatar-img\"\n      src={avatar}\n      alt=\"Avatar\"\n      loader={<Loader data-testid=\"avatar-img\" skeletonProps={skeletonProps} {...props} />}\n      {...props}\n    />\n  );\n};\n\nAvatar.propTypes = {\n  fallback: PropTypes.string,\n  skeletonProps: skeletonPropType,\n};\n\nAvatar.defaultProps = {\n  fallback: '/public/apps/my-profile/images/Avatars-00.png',\n};\n\nexport default Avatar;\n"],"sourceRoot":""}