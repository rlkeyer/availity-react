{"version":3,"sources":["webpack:///../packages/payer-logo/src/PayerLogo.js"],"names":["fetchLogo","query","variables","path","clientId","avWebQLApi","create","headers","data","get","getLogo","spaceId","payerId","Error","id","url","payerIDs","types","replace","PayerLogo","props","useState","setUrl","useEffectAsync","_url","src","alt","propTypes","PropTypes","string","isRequired"],"mappings":"u6GAMA,IA8BMA,UAAS,+DAAG,iBAAOC,MAAOC,UAAWC,KAAMC,UAA/B,oLAIJC,MAAWC,OACnB,CACEL,YACAC,qBAEF,CAAEK,QAAS,CAAE,cAAeH,YAThB,kDAGJI,KAHI,sBAGZA,KAAQA,KAHI,yBAYPC,cAAID,KAAML,OAZH,wKAAH,gBAATH,UAAS,sDAkBFU,QAAO,gEAAG,kBAAOC,QAASC,QAASR,UAAzB,kJAChBA,SADgB,8BAEb,IAAIS,MAAM,wBAFG,4BAOfF,QAPe,gCAQXT,UAAY,CAAEY,GAAIH,SACX,mCATI,iBAULX,UA1DG,4LA0DqBE,UADvB,mCACwCE,UAVpC,OAUjBW,IAViB,mDAWRH,QAXQ,gCAYXV,WAAY,CAAEc,SAAU,CAACJ,SAAUK,MAAO,CAAC,UACpC,+CAbI,kBAcLjB,UAhDG,sSAgDqBE,WADvB,+CACwCE,UAdpC,SAcjBW,IAdiB,kBAkBfA,IAAM,mDAAmDH,QAAQM,QAAQ,MAAO,IAA7E,QAlBY,yCAsBZH,KAtBY,kLAAH,gBAAPL,QAAO,oDA4BdS,oBAAY,SAAZA,UAAa,OAA6C,IAA3CR,QAA2C,MAA3CA,QAASC,QAAkC,MAAlCA,QAASR,SAAyB,MAAzBA,SAAagB,MAAY,0CAC9D,0BAAsBC,uBAAS,MAA/B,GAAON,IAAP,cAAYO,OAAZ,cAOA,OALAC,gBAAc,2CAAC,uKACMb,QAAQC,QAASC,QAASR,UADhC,OACPoB,KADO,eAEbF,OAAOE,MAFM,0DAGZ,CAACb,QAASC,QAASR,WAEjBA,WAAcQ,SAAYD,SAExB,6CAAKc,IAAKV,IAAKW,IAAI,cAAiBN,QAFK,MAR5CD,oB,wBAaNA,oBAAUQ,UAAY,CACpBhB,QAASiB,qBAAUC,OACnBjB,QAASgB,qBAAUC,OACnBzB,SAAUwB,qBAAUC,OAAOC,Y,4QAGdX,sC","file":"20.39951cc0.iframe.bundle.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useEffectAsync } from '@availity/hooks';\nimport { avWebQLApi } from '@availity/api-axios';\nimport get from 'lodash/get';\n\nconst spaceIDQuery = `\nquery configurationFindById($id: ID!){\n  configurationFindOne(id: $id){\n    ...on PayerSpace{\n      images{\n        tile\n        logo\n        billboard\n      }\n    }\n  }\n}\n`;\n\nconst payerIDQuery = `\nquery configurationFindMany($payerIDs: [ID!], $types: [TypeEnum!]){\n  configurationPagination(filter: { payerIds: $payerIDs, types: $types }){\n    items {\n      ...on PayerSpace {\n        images{\n          tile\n          logo\n          billboard\n        }\n      }\n    }\n  }\n}\n`;\n\nconst fetchLogo = async (query, variables, path, clientId) => {\n  try {\n    const {\n      data: { data },\n    } = await avWebQLApi.create(\n      {\n        query,\n        variables,\n      },\n      { headers: { 'X-Client-ID': clientId } }\n    );\n\n    return get(data, path);\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const getLogo = async (spaceId, payerId, clientId) => {\n  if (!clientId) {\n    throw new Error('clientId is required');\n  }\n\n  try {\n    let url;\n    if (spaceId) {\n      const variables = { id: spaceId };\n      const path = 'configurationFindOne.images.logo';\n      url = await fetchLogo(spaceIDQuery, variables, path, clientId);\n    } else if (payerId) {\n      const variables = { payerIDs: [payerId], types: ['space'] };\n      const path = 'configurationPagination.items[0].images.logo';\n      url = await fetchLogo(payerIDQuery, variables, path, clientId);\n\n      // We can probably remove this at some point once our spaces data is complete\n      if (!url) {\n        url = `/public/apps/eligibility/images/value-add-logos/${payerId.replace(/\\s/g, '')}.gif`;\n      }\n    }\n\n    return url;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst PayerLogo = ({ spaceId, payerId, clientId, ...props }) => {\n  const [url, setUrl] = useState(null);\n\n  useEffectAsync(async () => {\n    const _url = await getLogo(spaceId, payerId, clientId);\n    setUrl(_url);\n  }, [spaceId, payerId, clientId]);\n\n  if (!clientId || (!payerId && !spaceId)) return null;\n\n  return <img src={url} alt=\"Payer logo\" {...props} />;\n};\n\nPayerLogo.propTypes = {\n  spaceId: PropTypes.string,\n  payerId: PropTypes.string,\n  clientId: PropTypes.string.isRequired,\n};\n\nexport default PayerLogo;\n"],"sourceRoot":""}