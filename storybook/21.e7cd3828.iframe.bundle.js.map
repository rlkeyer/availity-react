{"version":3,"sources":["webpack:///../packages/phone/src/Phone.js"],"names":["Phone","name","label","country","showExtension","extProps","phoneColProps","restPhoneProps","useFormikContext","setFieldValue","setFieldTouched","ext","extColProps","restExtProps","xs","onBlur","formatPhoneOnBlur","value","target","asYouFormat","phoneString","asYouType","AsYouType","input","formattedOutput","propTypes","PropTypes","string","isRequired","bool","object","shape"],"mappings":"ynDAOA,IAAMA,MAAQ,SAARA,MAAS,MAAuG,IAArGC,KAAqG,KAArGA,KAAMC,MAA+F,KAA/FA,MAA+F,kBAAxFC,qBAAwF,iBAA9E,KAA8E,qCAAxEC,iCAAwE,2CAAjDC,SAAiD,KAAjDA,SAAUC,cAAuC,KAAvCA,cAAkBC,eAAqB,yCACpH,kBAA2CC,gDAAnCC,cAAR,kBAAQA,cAAeC,gBAAvB,kBAAuBA,gBAEnBC,IAAM,KACV,GAAIP,cAAe,CACjB,IAAQH,MAA8CI,SAA9CJ,KAAMC,OAAwCG,SAAxCH,MAAOU,YAAiCP,SAAjCO,YAAgBC,aAArC,yBAAsDR,SAAtD,YAEAM,IACE,4DAAC,2CAAD,iBAASC,YAAT,UACE,4DAAC,8CAAD,eAAOX,KAAMA,MAAMC,MAAOA,QAAWW,kBAkB3C,OACE,6DAAC,2CAAD,WACE,4DAAC,2CAAD,eAAKC,GAAIV,cAAgB,GAAK,IAAQE,cAAtC,UACE,4DAAC,8CAAD,eAAOL,KAAMA,KAAMC,MAAOA,MAAOa,OARb,SAApBC,kBAAqB,OAA0B,IAAdC,MAAc,MAAxBC,OAAUD,MACrCR,cAAcR,KATI,SAAdkB,YAAeC,aAEnB,IAAMC,UAAY,IAAIC,iDAAUnB,SAGhC,OAFAkB,UAAUE,MAAMH,aAETC,UAAUG,gBAIGL,CAAYF,QAAQ,GACxCP,gBAAgBT,MAAM,GAAM,KAMwCM,oBAEjEI,QAhCDX,M,oBAqCNA,MAAMyB,UAAY,CAChBxB,KAAMyB,kDAAUC,OAAOC,WACvB1B,MAAOwB,kDAAUC,OACjBvB,cAAesB,kDAAUG,KACzB1B,QAASuB,kDAAUC,OACnBrB,cAAeoB,kDAAUI,OACzBzB,SAAUqB,kDAAUK,MAAM,CACxB9B,KAAMyB,kDAAUC,OAAOC,WACvB1B,MAAOwB,kDAAUC,OACjBf,YAAac,kDAAUI,U,gnBAIZ9B,kC","file":"21.e7cd3828.iframe.bundle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from '@availity/form';\nimport { useFormikContext } from 'formik';\nimport { AsYouType } from 'libphonenumber-js';\nimport { Row, Col } from 'reactstrap';\n\nconst Phone = ({ name, label, country = 'US', showExtension = false, extProps, phoneColProps, ...restPhoneProps }) => {\n  const { setFieldValue, setFieldTouched } = useFormikContext();\n\n  let ext = null;\n  if (showExtension) {\n    const { name, label, extColProps, ...restExtProps } = extProps;\n\n    ext = (\n      <Col {...extColProps}>\n        <Field name={name} label={label} {...restExtProps} />\n      </Col>\n    );\n  }\n\n  const asYouFormat = (phoneString) => {\n    // Use AsYouType instead of parsePhoneNumberFromString.format() so partial values can still be formatted\n    const asYouType = new AsYouType(country);\n    asYouType.input(phoneString);\n\n    return asYouType.formattedOutput;\n  };\n\n  const formatPhoneOnBlur = ({ target: { value } }) => {\n    setFieldValue(name, asYouFormat(value), true);\n    setFieldTouched(name, true, true);\n  };\n\n  return (\n    <Row>\n      <Col xs={showExtension ? 10 : 12} {...phoneColProps}>\n        <Field name={name} label={label} onBlur={formatPhoneOnBlur} {...restPhoneProps} />\n      </Col>\n      {ext}\n    </Row>\n  );\n};\n\nPhone.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  showExtension: PropTypes.bool,\n  country: PropTypes.string,\n  phoneColProps: PropTypes.object,\n  extProps: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    extColProps: PropTypes.object,\n  }),\n};\n\nexport default Phone;\n"],"sourceRoot":""}