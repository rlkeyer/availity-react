{"version":3,"sources":["webpack:///../packages/link/src/Link.js"],"names":["setRel","url","target","absolute","getLocation","href","location","document","createElement","hostname","window","linkStyles","textDecoration","AvLink","Tag","tag","children","onClick","loadApp","props","isAbsoluteUrl","getUrl","encodeURIComponent","getTarget","startsWith","style","event","rel","defaultProps","propTypes","PropTypes","string","oneOfType","func","node","isRequired","bool"],"mappings":"quCAKO,IA8BDA,OAAS,SAATA,OAAUC,IAAKC,OAAQC,UAC3B,GAAe,WAAXD,QAAuBC,UAPT,SAAdC,YAAeC,MACnB,IAAMC,SAAWC,SAASC,cAAc,KAExC,OADAF,SAASD,KAAOA,KACTC,SAKQF,CAAYH,KAChBQ,WAAaC,OAAOJ,SAASG,SAEpC,MAAO,uBAOPE,WAAa,CAAEC,eAAgB,aAE/BC,YAAS,SAATA,OAAU,MAAqE,IAA9DC,IAA8D,KAAnEC,IAAUV,KAAyD,KAAzDA,KAAMH,OAAmD,KAAnDA,OAAQc,SAA2C,KAA3CA,SAAUC,SAAiC,KAAjCA,QAASC,QAAwB,KAAxBA,QAAYC,MAAY,yCAC7EhB,SAAWiB,cAAcf,MACzBJ,IA9Cc,SAAToB,SAA0C,IAAhCpB,IAAgC,uDAA1B,GAAIiB,QAAsB,uCACrD,OADqD,0CACpCA,QAAgBjB,IAEjC,uCAA8CqB,mBAAmBrB,KA2CrDoB,CAAOhB,KAAMa,QAASf,UAGlC,OAFAD,OAzCuB,SAAZqB,UAAarB,QAGxB,GAAIA,SAAWA,OAAOsB,WAAW,KAAM,CAGrC,GAAe,SAAXtB,QAAgC,YAAXA,OACvB,MAAO,QAET,GAAe,QAAXA,OACF,MAAO,SAIX,OAAOA,QAAU,QA2BRqB,CAAUrB,QAGjB,wBAACY,IAAD,eACET,KAAMJ,IACNC,OAAQA,OACRuB,MAAOd,WACPM,QAAS,iBAACS,OAAD,OAAWT,UAAWA,SAAQS,MAAOzB,MAC9C,cAAY,cACZ0B,IAAK3B,OAAOC,IAAKC,OAAQC,WACrBgB,MAPN,UASGH,aAfDH,Y,qBAoBNA,YAAOe,aAAe,CACpBb,IAAK,IACLG,SAAS,GAGXL,YAAOgB,UAAY,CACjB3B,OAAQ4B,qBAAUC,OAClBhB,IAAKe,qBAAUE,UAAU,CAACF,qBAAUG,KAAMH,qBAAUC,SACpDf,SAAUc,qBAAUI,KACpB7B,KAAMyB,qBAAUC,OAAOI,WACvBlB,QAASa,qBAAUG,KACnBf,QAASY,qBAAUM,KACnBT,IAAKG,qBAAUC,Q,2kBAGFlB,qB","file":"19.eee88ccc.iframe.bundle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isAbsoluteUrl } from '@availity/resolve-url';\n\n// if absolute or loadApp is disabled, return url. otherwise loadappify the url\nexport const getUrl = (url = '', loadApp, absolute) => {\n  if (absolute || !loadApp) return url;\n\n  return `/public/apps/home/#!/loadApp?appUrl=${encodeURIComponent(url)}`;\n};\n\nexport const getTarget = (target) => {\n  // should start with _, otherwise it is specifying a specific frame name\n  // _blank = new tab/window, _self = same frame, _parent = parent frame (use for home page from modals), _top = document body, framename = specific frame\n  if (target && !target.startsWith('_')) {\n    // Thanos uses BODY\n    // 'newBody' hard-coded in spaces -> should we keep this logic?\n    if (target === 'BODY' || target === 'newBody') {\n      return '_self';\n    }\n    if (target === 'TAB') {\n      return '_blank';\n    }\n  }\n\n  return target || '_self';\n};\n\n// takes href and transforms it so that we can compare hostnames and other properties\nconst getLocation = (href) => {\n  const location = document.createElement('a');\n  location.href = href;\n  return location;\n};\n\nconst setRel = (url, target, absolute) => {\n  if (target === '_blank' && absolute) {\n    const dest = getLocation(url);\n    if (dest.hostname !== window.location.hostname) {\n      // default rel when linking to external destinations for performance and security\n      return 'noopener noreferrer';\n    }\n  }\n  // eslint-disable-next-line unicorn/no-useless-undefined\n  return undefined;\n};\n\nconst linkStyles = { textDecoration: 'underline' };\n\nconst AvLink = ({ tag: Tag, href, target, children, onClick, loadApp, ...props }) => {\n  const absolute = isAbsoluteUrl(href);\n  const url = getUrl(href, loadApp, absolute);\n  target = getTarget(target);\n\n  return (\n    <Tag\n      href={url}\n      target={target}\n      style={linkStyles}\n      onClick={(event) => onClick && onClick(event, url)}\n      data-testid=\"av-link-tag\"\n      rel={setRel(url, target, absolute)}\n      {...props}\n    >\n      {children}\n    </Tag>\n  );\n};\n\nAvLink.defaultProps = {\n  tag: 'a',\n  loadApp: true,\n};\n\nAvLink.propTypes = {\n  target: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  children: PropTypes.node,\n  href: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  loadApp: PropTypes.bool,\n  rel: PropTypes.string,\n};\n\nexport default AvLink;\n"],"sourceRoot":""}