{"version":3,"sources":["webpack:///../packages/feedback/src/FeedbackButton.js","webpack:///../packages/feedback/src/SmileField.js","webpack:///../packages/feedback/src/FeedbackForm.js","webpack:///../node_modules/@availity/native-form/src/flattenObject.js","webpack:///../node_modules/@availity/native-form/src/index.js","webpack:///../packages/feedback/src/SupportForm.js","webpack:///../packages/feedback/src/SupportModal.js","webpack:///../packages/feedback/src/SupportDropdown.js","webpack:///../packages/feedback/src/FeedbackDropdown.js","webpack:///../packages/feedback/src/FeedbackModal.js","webpack:///../packages/feedback/src/Feedback.js"],"names":["btnStyles","fontSize","padding","iconStyles","margin","FeedbackButton","onClick","icon","active","children","iconSize","rest","Button","style","color","onKeyDown","keyCode","name","size","className","propTypes","PropTypes","func","string","node","defaultProps","flex","SmileField","options","onChange","autoFocusFeedbackButton","value","useField","setFieldValue","useFormikContext","map","option","i","autoFocus","description","isRequired","arrayOf","shape","label","bool","yup","format","msg","this","test","exclusive","message","undefined","fieldStyles","resize","inlineStyles","display","FeedbackForm","onClose","faceOptions","aboutOptions","aboutLabel","onFeedbackSent","prompt","additionalComments","staticFields","analytics","modalHeaderProps","showSupport","setSupportIsActive","formProps","useState","setActive","sent","setSent","sendFeedback","smileField","values","avRegionsApi","getCurrentRegion","response","info","surveyId","replace","smileLocation","smile","url","window","location","href","region","data","regions","id","userAgent","navigator","submitTime","Date","useEffect","setTimeout","Object","keys","forEach","key","ModalHeader","role","tabIndex","tag","initialValues","additionalFeedback","feedback","feedbackApp","validationSchema","max","required","length","onSubmit","ModalBody","FormGroup","type","rows","ModalFooter","disabled","oneOfType","number","object","avLogMessagesApi","parseValue","toString","flattenObject","ob","reduce","toReturn","k","prototype","call","toJSON","flatObject","isArray","Array","k2","field","Error","spaceId","params","formAttributes","mergedOptions","method","action","target","form","document","createElement","setAttribute","flat","fields","join","insertAdjacentHTML","body","appendChild","submit","ORG_VALIDATION_MESSAGE","getToken","cookie","openSupport","setBlocking","feedbackToggle","avOrganizationsApi","getOrganizations","organizations","some","org","organization","avWebQLApi","create","query","variables","organizationId","salesforceResponse","open","salesforceData","salesforceUser","attributes","orgGenKey","customerId","organizationName","partyId","payerId","X_Client_ID","X_XSRF_TOKEN","accountId","avSalesForceContactId","avSalesForceContactAccId","newCommunity","nativeForm","orgSelectTest","orgSelectSchema","componentValue","isValid","valid","SupportForm","typeError","getResult","SupportModal","supportIsActive","toggle","supportZIndex","blocking","Modal","fade","isOpen","zIndex","dropdownStyles","width","maxWidth","SupportDropdown","DropdownMenu","right","positionFixed","keepInView","FeedbackDropdown","supportToggle","modal","React","support","toRender","FeedbackModal","formOptions","Feedback","appName","outline","props","useToggle","feedbackIsOpen","Dropdown","DropdownToggle"],"mappings":"u5DAKA,IAAMA,UAAY,CAAEC,SAAU,QAASC,QAAS,aAC1CC,WAAa,CAAEC,OAAQ,OAEvBC,8BAAiB,SAAjBA,eAAkB,MAAD,IAAGC,SAAH,KAAGA,QAASC,KAAZ,KAAYA,KAAMC,OAAlB,KAAkBA,OAAQC,SAA1B,KAA0BA,SAAUC,SAApC,KAAoCA,SAAaC,KAAjD,gDACrB,yBAACC,OAAA,EAAD,eACEC,MAAOb,UACPc,MAAON,SAAWD,KAAO,UAAY,QACrC,eAAcC,SAAWD,KACzBD,QAAS,mBACPA,SAAQC,OAEVQ,UAAW,iCAA6B,KAA7B,MAAGC,SAAgCV,SAAQC,QAClDI,KARN,WAUE,wBAAC,sBAAD,CAAM,cAAY,gBAAgBM,KAAMV,KAAMW,KAAMR,SAAUG,MAAOV,aACrE,gCAAMgB,UAAU,UAAhB,SAA2BV,gBAZzBJ,8B,6BAgBNA,8BAAee,UAAY,CACzBd,QAASe,qBAAUC,KACnBf,KAAMc,qBAAUE,OAChBf,OAAQa,qBAAUE,OAClBd,SAAUY,qBAAUG,KACpBd,SAAUW,qBAAUE,QAGtBlB,8BAAeoB,aAAe,CAC5Bf,SAAU,I,8aAGGL,qD,67CC/Bf,IAAML,qBAAY,CAAE0B,KAAM,EAAGtB,OAAQ,aAE/BuB,sBAAa,SAAbA,WAAc,MAAyD,IAAvDV,KAAuD,KAAvDA,KAAMW,QAAiD,KAAjDA,QAASC,SAAwC,KAAxCA,SAAUC,wBAA8B,KAA9BA,wBACpCC,MAAT,eAAoBC,qBAASf,MAA7B,MAASc,MACDE,cAAkBC,uBAAlBD,cAER,OAAOL,QAAQO,KAAI,SAACC,OAAQC,GAAT,OACjB,wBAAC,mBAAD,CACEC,UAAiB,IAAND,GAAWP,wBACtBjB,MAAOb,qBAEPO,KAAM6B,OAAO7B,KACbG,SAAS,KACTqB,MAAOK,OACP5B,OAAQuB,OAASA,MAAMxB,KACvBD,QAAS,mBACP2B,cAAchB,KAAMmB,QAChBP,UACFA,SAASO,SAXf,SAeGA,OAAOG,aAZHH,OAAO7B,UAiBlBoB,sBAAWP,UAAY,CACrBH,KAAMI,qBAAUE,OAAOiB,WACvBZ,QAASP,qBAAUoB,QACjBpB,qBAAUqB,MAAM,CACdnC,KAAMc,qBAAUE,OAChBgB,YAAalB,qBAAUE,OACvBoB,MAAOtB,qBAAUE,UAGrBM,SAAUR,qBAAUC,KACpBQ,wBAAyBT,qBAAUuB,MAGrCjB,sBAAWF,aAAe,CACxBG,QAAS,CACP,CACErB,KAAM,QACNgC,YAAa,cACbI,MAAO,qBAET,CACEpC,KAAM,MACNgC,YAAa,WACbI,MAAO,2BAET,CACEpC,KAAM,QACNgC,YAAa,cACbI,MAAO,yBAGXb,yBAAyB,GAGZH,yC,45ECzDfkB,KAAcA,KAAY,cAAc,SAASC,OAAON,WAAYO,KAClE,OAAOC,KAAKC,KAAK,CACfhC,KAAM,YACNiC,WAAW,EACXC,QAASJ,KAAO,0BAChBE,KAJe,cAIVlB,OACH,OAAIS,iBACeY,IAAVrB,YAOf,IAAMsB,YAAc,CAAEC,OAAQ,QACxBC,aAAe,CAAEC,QAAS,eAAgBpD,OAAQ,GAElDqD,0BAAe,SAAfA,aAAgB,MAgBhB,IAfJxC,KAeI,KAfJA,KACAyC,QAcI,KAdJA,QACAC,YAaI,KAbJA,YACAC,aAYI,KAZJA,aACAC,WAWI,KAXJA,WACAC,eAUI,KAVJA,eACAC,OASI,KATJA,OACAC,mBAQI,KARJA,mBACAC,aAOI,KAPJA,aACAC,UAMI,KANJA,UACAC,iBAKI,KALJA,iBACAC,YAII,KAJJA,YACAC,mBAGI,KAHJA,mBACAvC,wBAEI,KAFJA,wBACGwC,UACC,iEACJ,sCAA4BC,uBAAS,MAArC,GAAO/D,OAAP,cAAegE,UAAf,cACA,sCAAwBD,uBAAS,MAAjC,GAAOE,KAAP,cAAaC,QAAb,cAEMC,aAAY,qB,qVAAA,0BAAG,4KAASC,WAAT,MAASA,WAAeC,OAAxB,uEACIC,MAAaC,mBADjB,cACbC,SADa,8BAGbd,UAAUe,KAAV,eACJC,SAAajE,KAAKkE,QAAQ,MAAO,KAAzB,gBACRC,cAAe,GAAGnE,KAClBoE,MAAO,QAAQT,WAAWrE,KAC1B+E,IAAKC,OAAOC,SAASC,KACrBC,OAAQV,SAASW,KAAKC,QAAQ,IAAMZ,SAASW,KAAKC,QAAQ,GAAGC,GAC7DC,UAAWP,OAAOQ,UAAUD,UAC5BE,WAAY,IAAIC,MACbpB,OACAZ,eAZc,OAenBS,QAAQG,QAfW,wDAAH,gBAAZF,aAAY,2CAsClB,OAnBAuB,yBAAU,WACJzB,MACF0B,YAAW,WACLzC,SACFA,UAEEI,iBACFsC,OAAOC,KAAK5B,MAAM6B,SAAQ,SAACC,KAAD,YAAuBnD,IAAdqB,KAAK8B,aAA6B9B,KAAK8B,QAE1EzC,eAAe,OAAD,QACZtD,OAAQA,OAAOD,MACZkE,UAGN,OAGJ,CAACA,OAEGA,KACL,wBAAC+B,YAAA,EAAD,eACEC,KAAK,SACLZ,GAAG,uBACHa,SAAS,IACTvF,UAAU,iCACNgD,iBALN,4CAUA,yDACE,wBAACqC,YAAA,EAAD,eACEX,GAAG,uBACHY,KAAK,UACL,aAAW,IACXtF,UAAU,KACVwF,IAAI,OACAxC,iBANN,UAQGJ,QAAU,gCAAgC9C,QAE7C,yBAAC,gBAAD,eACE,aAAW,gBACX,mBAAiB,uBACjBwF,KAAK,OACL1F,UAAW,iCAA6B,KAA7B,MAAGC,SAAgC0C,WAC9C,cAAY,gBACZkD,cAAe,CACb,oBAAgBxD,EAChByD,wBAAoBzD,EACpB0D,cAAU1D,EACV2D,iBAAa3D,EACbwB,gBAAYxB,GAEd4D,iBAAkBnE,OAAaH,MAAM,CACnCoE,SAAUjE,OAAaoE,IAAI,IAAK,0CAA0CC,SAAS,2BACnFL,mBAAoBhE,OAAaoE,IAAI,IAAK,qDAC1CrC,WAAY/B,OAETH,MAAM,CACLnC,KAAMsC,OAAaqE,WACnB3E,YAAaM,OACbF,MAAOE,SAERqE,SAAS,2BACZH,YAAalE,OAAaL,WAAWoB,aAAauD,OAAS,EAAG,8BAE5D7C,UA1BN,CA2BE8C,SAAU,kBAACvC,QAAD,OAAYF,aAAaE,SA3BrC,UA6BE,yBAACwC,UAAA,EAAD,WACE,wBAACC,UAAA,EAAD,CACEpG,KAAK,KACL2E,GAAG,eACHY,KAAK,QACL,kBAAgB,uBAChB,cAAY,eACZtF,UAAU,0CANZ,SAQE,wBAAC,eAAD,CACES,QAAS+B,YACT1C,KAAK,aACLY,SAAU,kBAACO,QAAD,OAAYoC,UAAUpC,SAChCN,wBAAyBA,4BAG5BtB,OACC,yDACGoD,aAAauD,OAAS,GACrB,wBAAC,kBAAD,CACElG,KAAK,cACL4E,GAAG,gBACH,cAAY,gBACZlD,MAAOkB,WACPjC,QAASgC,eAGb,wBAAC,gBAAD,CACE2D,KAAK,WACLtG,KAAK,WACL0B,MAAQnC,QAAUA,OAAOmC,OAAU,+BACnC9B,MAAOwC,YACPmE,KAAK,MAENxD,oBACC,wBAAC,gBAAD,CACEuD,KAAK,WACLtG,KAAK,qBACL0B,MAAM,oCACN9B,MAAOwC,YACPmE,KAAK,SAIT,QAGN,yBAACC,YAAA,EAAD,WACGrD,YACC,yDACE,gCAAMjD,UAAU,oBAAoBN,MAAO0C,aAA3C,wBAGA,wBAAC3C,OAAA,EAAD,CACEO,UAAU,OACVb,QAAS,0BAAM+D,oBAAmB,IAClCvD,MAAM,OACNyG,KAAK,SACLxG,UAAW,iCAA6B,KAA7B,MAAGC,SAAgCqD,oBAAmB,IALnE,sCAUA,KAEHX,QACC,wBAAC9C,OAAA,EAAD,CAAQN,QAASoD,QAAS5C,MAAM,YAAYC,UAAW,iCAA6B,KAA7B,MAAGC,SAAgC0C,WAA1F,mBAGE,KAEJ,wBAAC9C,OAAA,EAAD,CAAQ2G,KAAK,SAASzG,MAAM,UAAU4G,UAAWlH,OAAjD,sCASViD,0BAAarC,UAAY,CACvBH,KAAMI,qBAAUE,OAAOiB,WACvBsB,eAAgBzC,qBAAUC,KAC1BqC,YAAatC,qBAAUoB,QACrBpB,qBAAUqB,MAAM,CACdnC,KAAMc,qBAAUE,OAChBgB,YAAalB,qBAAUE,OACvBoB,MAAOtB,qBAAUE,UAGrBqC,aAAcvC,qBAAUoB,QACtBpB,qBAAUqB,MAAM,CACdzB,KAAMI,qBAAUE,OAChBQ,MAAOV,qBAAUsG,UAAU,CAACtG,qBAAUE,OAAQF,qBAAUuG,YAG5D/D,WAAYxC,qBAAUG,KACtBkC,QAASrC,qBAAUC,KACnByC,OAAQ1C,qBAAUE,OAClByC,mBAAoB3C,qBAAUuB,KAC9BqB,aAAc5C,qBAAUwG,OACxB1D,iBAAkB9C,qBAAUqB,MAAV,iBAAqB8D,cAAYpF,YACnD8C,UAAW7C,qBAAUqB,MAAM,CACzBuC,KAAM5D,qBAAUC,KAAKkB,aAEvB4B,YAAa/C,qBAAUuB,KACvByB,mBAAoBhD,qBAAUC,KAC9BQ,wBAAyBT,qBAAUuB,MAGrCa,0BAAahC,aAAe,CAC1BmC,aAAc,GACdC,WAAY,gBACZG,oBAAoB,EACpBG,iBAAkB,GAClBD,UAAW4D,MACX1D,aAAa,G,ihDAGAX,sD,yvDC7PTsE,Y,8KAAa,SAAbA,WAAahG,OAAK,OAAIA,YAAwCA,MAAQA,MAAMiG,aAsBnEC,kBApBO,SAAhBA,cAAgBC,IAAE,OACtB9B,OAAOC,KAAK6B,IAAIC,QAAO,SAACC,SAAUC,GAChC,GAA8C,kBAA1CjC,OAAOkC,UAAUN,SAASO,KAAKL,GAAGG,IACpCD,SAASC,GAAKH,GAAGG,GAAGG,cACf,GAAIN,GAAGG,IAAuB,iBAAVH,GAAGG,GAI5B,IAHA,IAAMI,WAAaR,cAAcC,GAAGG,IAC9BK,QAAUC,MAAMD,QAAQR,GAAGG,IAEjC,kBAAiBjC,OAAOC,KAAKoC,YAA7B,4BAA0C,CAArC,IAAMG,GAAE,iBACXR,SAAS,GACJC,GAAIK,QAAUE,GAAGzD,QAAQ,gBAAiB,UAA/B,IAA+CyD,KAC3Db,WAAWU,WAAWG,UAG5BR,SAASC,GAAKN,WAAWG,GAAGG,IAG9B,OAAOD,WACN,KCnBClB,SAAW,SAAXA,SAAW2B,OACf,MAAM,IAAIC,MAASD,MAAb,sCAGO,2BAab,IARG,IAJHE,QAIG,uDAJO7B,SAAS,WACnB8B,OAGG,uDAHM,GACTC,eAEG,uDAFc,GACjB1B,KACG,uDADI,OAED2B,cAAgB,OAAH,QACjBC,OAAQ,OACRC,OAAQ,gDAAgD7B,KAAlD,IAA0DwB,QAChEM,OAAQ,UACLJ,gBAECK,KAAOC,SAASC,cAAc,QACpC,kBAAkBpD,OAAOC,KAAK6C,eAA9B,4BAA8C,CAAzC,IAAM3C,IAAG,iBACZ+C,KAAKG,aAAalD,IAAK2C,cAAc3C,MAEvC,IAAMmD,KAAOzB,kBAAce,QACrBW,OAASvD,OAAOC,KAAKqD,MACxBvH,KAAI,SAAAoE,KAGH,oCAFaA,IAAIpB,QAAQ,UAAW,MAEpC,YADcuE,KAAKnD,KACnB,UAEDqD,KAAK,IAERN,KAAKO,mBAAmB,YAAaF,QAErCJ,SAASO,KAAKC,YAAYT,MAC1BA,KAAKU,U,8mBCxBP,IAEMC,uBAAyB,mDAEzBC,SAAW,SAAXA,WAAW,OAAMX,SAASY,OAAOhF,QAAQ,mDAAoD,OAE7FiF,YAAW,+DAAG,iBAAOvF,OAAQwF,YAAahG,mBAAoBiG,gBAAhD,2KAClBD,aAAY,GADM,gBAEKE,MAAmBC,iBARd,QAMV,yBAIL7E,KAAK8E,cAAcC,MAAK,SAACC,KAAD,OAASA,IAAI9E,KAAOhB,OAAO+F,aAAa/E,MAJ3D,8CAKWgF,MAAWC,OAAO,CAC3CC,MAAO,uNASPC,UAAW,CACTC,eAAgBpG,OAAO+F,aAAa/E,MAhBxB,OAKhBqF,mBALgB,qBAqBdzF,KAAO,8BACI,OAEVyF,oBAAuBA,mBAAmBvF,MAC7CJ,OAAO4F,KAAK1F,KAHC,QAMT2F,eAAiBF,mBAAmBvF,KAAKA,KAAK0F,eACtC,aACU,aAEpBD,gBACIE,WAAa,CACjBC,UAAW1G,OAAO+F,aAAaY,WAC/BC,iBAAkB5G,OAAO+F,aAAa3J,KACtCyK,QAAS7G,OAAO+F,aAAa/E,GAC7B8F,QAAS,WACTC,YAAa,uCACbC,aAAc3B,YAGZkB,eAAevF,IAAMuF,eAAeU,YACtCR,WAAWS,sBAAwBX,eAAevF,GAClDyF,WAAWU,yBAA2BZ,eAAeU,WAGvDrG,KAAO,sDAAqD2F,eAAea,aAjBrD,aADV,cAoBZC,gBApBY,aAoBMZ,WAAY,CAAElC,OAAQ3D,KAAM4D,OAAQ,WACtDgB,aAAY,IAEZ9E,OAAO4F,KAAK1F,KA9BC,QAgCfpB,oBAAmB,GACnBiG,gBAAe,GAvDG,yDAAH,gBAAXF,YAAW,sDA6EjBvH,KAAcA,KAAY,iBAnB1B,SAASsJ,cAAcpJ,KACrB,IAKiB,MALXqJ,gBAAkBvJ,OAAaH,MAAM,CACzCmD,GAAIhD,OAAaL,YAAW,EAAMyH,wBAClChJ,KAAM4B,OAAaL,YAAW,EAAMyH,0BAGtC,OAAOjH,KAAKC,KAAK,CACfhC,KAAM,gBACNiC,WAAW,EACXC,QAASJ,KAAO,yBACVE,MAJS,mEAIJoJ,gBAJI,+HAKRA,eALQ,0DAKe,GALf,+BAOOD,gBAAgBE,QAAQD,gBAP/B,cAOPE,MAPO,yCAQNA,OARM,uHAenB,IAAMC,wBAAc,SAAdA,YAAe,OAAD,IAAGnI,mBAAH,MAAGA,mBAAoBgG,YAAvB,MAAuBA,YAAaC,eAApC,MAAoCA,eAApC,OAClB,yDACE,wBAAC9D,YAAA,EAAD,CAAaX,GAAG,sBAAsBY,KAAK,UAAU,aAAW,IAAItF,UAAU,KAAKwF,IAAI,MAAvF,iCAGA,yBAAC,gBAAD,CACE,aAAW,eACX,mBAAiB,sBACjBF,KAAK,OACL,cAAY,eACZG,cAAe,CACbgE,kBAAcxH,GAEhB4D,iBAAkBnE,KAAW,CAC3B+H,aAAc/H,OAEXsJ,cAAclC,wBACdzH,WAAWyH,wBACXwC,UAAUxC,0BAEf7C,SAAU,kBAACvC,QAAD,OAAYuF,YAAYvF,OAAQwF,YAAahG,mBAAoBiG,iBAf7E,UAiBE,wBAACjD,UAAA,EAAD,UACE,wBAAC,YAAD,CACEpG,KAAK,eACL0B,MAAM,yBACN,cAAY,eACZ+J,UAAW,mBAAC/G,MAAD,OAAUA,KAAK8E,mBAI9B,yBAAChD,YAAA,EAAD,WACE,wBAAC7G,OAAA,EAAD,CACEN,QAAS,0BAAM+D,oBAAmB,IAClCvD,MAAM,YACNyG,KAAK,SACLxG,UAAW,iCAA6B,KAA7B,MAAGC,SAAgCqD,oBAAmB,IAJnE,mBASA,wBAACzD,OAAA,EAAD,CAAQ,cAAY,aAAa2G,KAAK,SAASzG,MAAM,UAArD,gCAQR0L,wBAAYpL,UAAY,CACtBiD,mBAAoBhD,qBAAUC,KAC9B+I,YAAahJ,qBAAUC,KACvBgJ,eAAgBjJ,qBAAUC,M,iSAGbkL,4C,86CC9If,IAAMG,0BAAe,SAAfA,aAAgB,MAAmF,IAAjFC,gBAAiF,KAAjFA,gBAAiBC,OAAgE,KAAhEA,OAAQC,cAAwD,KAAxDA,cAAezI,mBAAyC,KAAzCA,mBAAoBiG,eAAqB,KAArBA,eAClF,0BAAgC/F,uBAAS,MAAzC,GAAOwI,SAAP,cAAiB1C,YAAjB,cAEA,OACE,wBAAC2C,MAAA,EAAD,CACEC,MAAI,EACJpH,GAAG,eACH,cAAY,eACZ,kBAAgB,sBAChBqH,OAAQN,gBACRC,OAAQA,OACRM,OAAQL,cAPV,SASE,wBAAC,kBAAD,CAASnG,IAAI,MAAMoG,SAAUA,SAA7B,SACE,wBAAC,gBAAD,CACE1I,mBAAoBA,mBACpBgG,YAAaA,YACbC,eAAgBA,sBAjBpBqC,0B,2BAwBNA,0BAAavL,UAAY,CACvBwL,gBAAiBvL,qBAAUuB,KAAKJ,WAChCqK,OAAQxL,qBAAUC,KAAKkB,WACvBsK,cAAezL,qBAAUsG,UAAU,CAACtG,qBAAUuG,OAAQvG,qBAAUE,SAChE8C,mBAAoBhD,qBAAUC,KAC9BgJ,eAAgBjJ,qBAAUC,M,scAGbqL,+C,2iDChCf,IAAMS,eAAiB,CAAEC,MAAO,QAASC,SAAU,OAAQpN,QAAS,GAE9DqN,gCAAkB,SAAlBA,gBAAmB,MAA2C,IAAzClJ,mBAAyC,KAAzCA,mBAAoBiG,eAAqB,KAArBA,eAC7C,yCAAgC/F,uBAAS,MAAzC,GAAOwI,SAAP,cAAiB1C,YAAjB,cAEA,OACE,wBAACmD,aAAA,EAAD,CACEC,OAAK,EACL5M,MAAOuM,eACPM,cAAc,QACdjH,KAAK,SACL,kBAAgB,sBALlB,SAOE,wBAAC,kBAAD,CAASE,IAAI,MAAMgH,YAAU,EAACZ,SAAUA,SAAxC,SACE,wBAAC,gBAAD,CACE1I,mBAAoBA,mBACpBgG,YAAaA,YACbC,eAAgBA,sBAfpBiD,gC,8BAsBNA,gCAAgBnM,UAAY,CAC1BiD,mBAAoBhD,qBAAUC,KAC9BgJ,eAAgBjJ,qBAAUC,M,iPAGbiM,wD,szEC9Bf,IAAMH,gCAAiB,CAAEC,MAAO,QAASC,SAAU,OAAQpN,QAAS,GAE9D0N,kCAAmB,SAAnBA,iBAAoB,MAUpB,IATJ7J,OASI,KATJA,OACA8I,OAQI,KARJA,OACA/I,eAOI,KAPJA,eACAM,YAMI,KANJA,YACAyJ,cAKI,KALJA,cACAf,cAII,KAJJA,cACAgB,MAGI,KAHJA,MACAxD,eAEI,KAFJA,eACGhG,UACC,yCACJ,gDAA8CyJ,gBAAMxJ,UAAS,GAA7D,GAAOqI,gBAAP,oBAAwBvI,mBAAxB,oBAEI2J,QAAU,KACVpB,kBACFoB,QAAUF,MACR,wBAAC,iBAAD,CACEjB,OAAQgB,cACRX,OAAQN,gBACRvI,mBAAoBA,mBACpByI,cAAeA,cACfxC,eAAgBA,iBAGlB,wBAAC,oBAAD,CAAiBuC,OAAQgB,cAAexJ,mBAAoBA,mBAAoBiG,eAAgBA,kBAIpG,IAAM2D,SAAWD,SACf,wBAACvK,aAAA,QAAD,eACEK,eAAgBA,eAChBC,OAAQA,OACRL,QAASmJ,OACTzI,YAAaA,YACbC,mBAAoBA,oBAChBC,YAIR,OACE,wBAACkJ,aAAA,EAAD,CAAcC,OAAK,EAAC5M,MAAOuM,gCAAgB3G,KAAK,SAAS,kBAAgB,uBAAuB,aAAW,QAA3G,SACGwH,YAzCDL,kC,+BA8CNA,kCAAiBxM,UAAY,CAC3B2C,OAAQ1C,qBAAUE,OAClBsL,OAAQxL,qBAAUC,KAClBwC,eAAgBzC,qBAAUC,KAC1B8C,YAAa/C,qBAAUuB,KACvBiL,cAAexM,qBAAUC,KACzBwL,cAAezL,qBAAUE,OACzBuM,MAAOzM,qBAAUuB,KACjB0H,eAAgBjJ,qBAAUC,M,glBAGbsM,2D,0yEC5Df,IAAMM,4BAAgB,SAAhBA,cAAiB,MAA2F,IAAzFhB,OAAyF,KAAzFA,OAAQL,OAAiF,KAAjFA,OAAQM,OAAyE,KAAzEA,OAAQ/I,YAAiE,KAAjEA,YAAa0I,cAAoD,KAApDA,cAAexC,eAAqC,KAArCA,eAAmB6D,YAAkB,mEAChH,6CAA8CJ,gBAAMxJ,UAAS,GAA7D,GAAOqI,gBAAP,oBAAwBvI,mBAAxB,oBAEA,OAAOuI,gBACL,wBAAC,iBAAD,CACEA,gBAAiBA,gBACjBvI,mBAAoBA,mBACpB8I,OAAQL,cACRD,OAAQA,OACRvC,eAAgBA,iBAGlB,wBAAC0C,MAAA,EAAD,CACEC,MAAI,EACJpH,GAAG,gBACH,cAAY,gBACZ3E,KAAK,KACL,kBAAgB,uBAChBgM,OAAQA,SAAWN,gBACnBC,OAAQA,OACRM,OAAQA,OARV,SAUE,wBAAC1J,aAAA,QAAD,eACEC,QAASmJ,OACTzI,YAAaA,YACbC,mBAAoBA,oBAChB8J,iBAMZD,4BAAc9M,UAAY,CACxB8L,OAAQ7L,qBAAUuB,KAAKJ,WACvBqK,OAAQxL,qBAAUC,KAAKkB,WACvB4B,YAAa/C,qBAAUuB,KACvBuK,OAAQ9L,qBAAUsG,UAAU,CAACtG,qBAAUuG,OAAQvG,qBAAUE,SACzDuL,cAAezL,qBAAUsG,UAAU,CAACtG,qBAAUuG,OAAQvG,qBAAUE,SAChE+I,eAAgBjJ,qBAAUC,M,yhBAGb4M,kD,8yECvCf,IAAME,kBAAW,SAAXA,SAAY,MAeZ,IAdJC,QAcI,KAdJA,QACAP,MAaI,KAbJA,MACAX,OAYI,KAZJA,OACAL,cAWI,KAXJA,cACArM,SAUI,KAVJA,SACAyD,UASI,KATJA,UACA/C,UAQI,KARJA,UACAmN,QAOI,KAPJA,QACAxN,MAMI,KANJA,MACAwD,UAKI,KALJA,UACAP,OAII,KAJJA,OACAD,eAGI,KAHJA,eACAM,YAEI,KAFJA,YACGmK,MACC,yDACJ,mCAAyCC,iBAAU,GAAnD,GAAOC,eAAP,eAAuBnE,eAAvB,eAEA,OACE,yBAACoE,SAAA,EAAD,eACExB,OAAQuB,iBAAmBX,MAC3BjB,OAAQ,yBAAMvC,kBACdnJ,UAAcA,UAAL,iBACLoN,MAJN,WAME,wBAACI,eAAA,EAAD,CAAgB7N,MAAOA,MAAOwN,QAASA,QAAvC,SACG7N,UAAY2D,YAAc,qBAAuB,kBAEnD0J,MACC,wBAAC,kBAAD,eACEhK,eAAgBA,eAChBC,OAAQA,OACRmJ,OAAQuB,eACRtB,OAAQA,OACRN,OAAQ,yBAAMvC,kBACdrJ,KAAMoN,QACNnK,UAAWA,UACXE,YAAaA,YACb0I,cAAeA,cACfxC,eAAgBA,gBACZhG,YAGN,wBAAC,qBAAD,eACER,eAAgBA,eAChBwG,eAAgBA,eAChBvG,OAAQA,OACRG,UAAWA,UACX2I,OAAQ,yBAAMvC,kBACdrJ,KAAMoN,QACNjK,YAAaA,YACb0I,cAAeA,cACfgB,MAAOA,OACHxJ,iBArDR8J,kB,uBA4DNA,kBAAShN,UAAY,CACnBiN,QAAShN,qBAAUE,OACnBuM,MAAOzM,qBAAUuB,KACjBuK,OAAQ9L,qBAAUsG,UAAU,CAACtG,qBAAUuG,OAAQvG,qBAAUE,SACzDuL,cAAezL,qBAAUsG,UAAU,CAACtG,qBAAUuG,OAAQvG,qBAAUE,SAChEd,SAAUY,qBAAUG,KACpBL,UAAWE,qBAAUE,OACrB+M,QAASjN,qBAAUuB,KACnB9B,MAAOO,qBAAUE,OACjB+C,UAAWjD,qBAAUwG,OACrB9D,OAAQ1C,qBAAUE,OAClBuC,eAAgBzC,qBAAUC,KAC1B4C,UAAW7C,qBAAUqB,MAAM,CACzBuC,KAAM5D,qBAAUC,KAAKkB,aAEvB4B,YAAa/C,qBAAUuB,MAGzBwL,kBAAS3M,aAAe,CACtBqM,OAAO,EACPhN,MAAO,YACPoD,UAAW4D,MACX1D,aAAa,G,6nCAGAgK,mC","file":"2.bc2e6244.iframe.bundle.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Button } from 'reactstrap';\nimport Icon from '@availity/icon';\n\nconst btnStyles = { fontSize: '1.4em', padding: '.2em .4em' };\nconst iconStyles = { margin: '0px' };\n\nconst FeedbackButton = ({ onClick, icon, active, children, iconSize, ...rest }) => (\n  <Button\n    style={btnStyles}\n    color={active === icon ? 'primary' : 'light'}\n    aria-pressed={active === icon}\n    onClick={() => {\n      onClick(icon);\n    }}\n    onKeyDown={({ keyCode }) => keyCode === 13 && onClick(icon)}\n    {...rest}\n  >\n    <Icon data-testid=\"feedback-icon\" name={icon} size={iconSize} style={iconStyles} />\n    <span className=\"sr-only\">{children}</span>\n  </Button>\n);\n\nFeedbackButton.propTypes = {\n  onClick: PropTypes.func,\n  icon: PropTypes.string,\n  active: PropTypes.string,\n  children: PropTypes.node,\n  iconSize: PropTypes.string,\n};\n\nFeedbackButton.defaultProps = {\n  iconSize: '',\n};\n\nexport default FeedbackButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useField, useFormikContext } from 'formik';\nimport FeedbackButton from './FeedbackButton';\n\nconst btnStyles = { flex: 1, margin: '0 2% 0 2%' };\n\nconst SmileField = ({ name, options, onChange, autoFocusFeedbackButton }) => {\n  const [{ value }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  return options.map((option, i) => (\n    <FeedbackButton\n      autoFocus={i === 0 && autoFocusFeedbackButton}\n      style={btnStyles}\n      key={option.icon}\n      icon={option.icon}\n      iconSize=\"2x\"\n      value={option}\n      active={value && value.icon}\n      onClick={() => {\n        setFieldValue(name, option);\n        if (onChange) {\n          onChange(option);\n        }\n      }}\n    >\n      {option.description}\n    </FeedbackButton>\n  ));\n};\n\nSmileField.propTypes = {\n  name: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      icon: PropTypes.string,\n      description: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ),\n  onChange: PropTypes.func,\n  autoFocusFeedbackButton: PropTypes.bool,\n};\n\nSmileField.defaultProps = {\n  options: [\n    {\n      icon: 'smile',\n      description: 'Smiley face',\n      label: 'What do you like?',\n    },\n    {\n      icon: 'meh',\n      description: 'Meh face',\n      label: 'What would you improve?',\n    },\n    {\n      icon: 'frown',\n      description: 'Frowny face',\n      label: \"What don't you like?\",\n    },\n  ],\n  autoFocusFeedbackButton: true,\n};\n\nexport default SmileField;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ModalBody, ModalHeader, ModalFooter, FormGroup } from 'reactstrap';\nimport { avLogMessagesApi, avRegionsApi } from '@availity/api-axios';\nimport { Form, Field } from '@availity/form';\nimport { SelectField } from '@availity/select';\nimport * as yup from 'yup';\nimport SmileField from './SmileField';\n\nyup.addMethod(yup.string, 'isRequired', function format(isRequired, msg) {\n  return this.test({\n    name: 'dateRange',\n    exclusive: true,\n    message: msg || 'This field is required.',\n    test(value) {\n      if (isRequired) {\n        return value !== undefined;\n      }\n      return true;\n    },\n  });\n});\n\nconst fieldStyles = { resize: 'none' };\nconst inlineStyles = { display: 'inline-block', margin: 0 };\n\nconst FeedbackForm = ({\n  name,\n  onClose,\n  faceOptions,\n  aboutOptions,\n  aboutLabel,\n  onFeedbackSent,\n  prompt,\n  additionalComments,\n  staticFields,\n  analytics,\n  modalHeaderProps,\n  showSupport,\n  setSupportIsActive,\n  autoFocusFeedbackButton,\n  ...formProps\n}) => {\n  const [active, setActive] = useState(null);\n  const [sent, setSent] = useState(null);\n\n  const sendFeedback = async ({ smileField, ...values }) => {\n    const response = await avRegionsApi.getCurrentRegion();\n\n    await analytics.info({\n      surveyId: `${name.replace(/\\s/g, '_')}_Smile_Survey`,\n      smileLocation: `${name}`,\n      smile: `icon-${smileField.icon}`,\n      url: window.location.href,\n      region: response.data.regions[0] && response.data.regions[0].id,\n      userAgent: window.navigator.userAgent,\n      submitTime: new Date(),\n      ...values, // Spread the form values onto the logger\n      ...staticFields, // Spread the static key value pairs onto the logger\n    });\n\n    setSent(values);\n  };\n\n  // Close the Modal once sent after 2 seconds\n  useEffect(() => {\n    if (sent) {\n      setTimeout(() => {\n        if (onClose) {\n          onClose(); // Mostly for Screen Reader use but a nice to have for all\n        }\n        if (onFeedbackSent) {\n          Object.keys(sent).forEach((key) => sent[key] === undefined && delete sent[key]);\n\n          onFeedbackSent({\n            active: active.icon,\n            ...sent,\n          });\n        }\n      }, 2000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sent]);\n\n  return sent ? (\n    <ModalHeader\n      role=\"status\"\n      id=\"feedback-form-header\"\n      tabIndex=\"0\"\n      className=\"d-flex justify-content-center\"\n      {...modalHeaderProps}\n    >\n      Thank you for your feedback.\n    </ModalHeader>\n  ) : (\n    <>\n      <ModalHeader\n        id=\"feedback-form-header\"\n        role=\"heading\"\n        aria-level=\"2\"\n        className=\"h5\"\n        tag=\"div\"\n        {...modalHeaderProps}\n      >\n        {prompt || `Tell us what you think about ${name}`}\n      </ModalHeader>\n      <Form\n        aria-label=\"Feedback Form\"\n        aria-describedby=\"feedback-form-header\"\n        role=\"form\"\n        onKeyDown={({ keyCode }) => keyCode === 27 && onClose()}\n        data-testid=\"feedback-form\"\n        initialValues={{\n          'face-options': undefined,\n          additionalFeedback: undefined,\n          feedback: undefined,\n          feedbackApp: undefined,\n          smileField: undefined,\n        }}\n        validationSchema={yup.object().shape({\n          feedback: yup.string().max(200, 'Feedback cannot exceed 200 characters.').required('This field is required.'),\n          additionalFeedback: yup.string().max(200, 'Additional Feedback cannot exceed 200 characters.'),\n          smileField: yup\n            .object()\n            .shape({\n              icon: yup.string().required(),\n              description: yup.string(),\n              label: yup.string(),\n            })\n            .required('This field is required.'),\n          feedbackApp: yup.string().isRequired(aboutOptions.length > 0, 'This field is required.'),\n        })}\n        {...formProps}\n        onSubmit={(values) => sendFeedback(values)}\n      >\n        <ModalBody>\n          <FormGroup\n            size=\"lg\"\n            id=\"face-options\"\n            role=\"group\"\n            aria-labelledby=\"feedback-form-header\"\n            data-testid=\"face-options\"\n            className=\"d-flex flex-row justify-content-between\"\n          >\n            <SmileField\n              options={faceOptions}\n              name=\"smileField\"\n              onChange={(option) => setActive(option)}\n              autoFocusFeedbackButton={autoFocusFeedbackButton}\n            />\n          </FormGroup>\n          {active ? (\n            <>\n              {aboutOptions.length > 0 && (\n                <SelectField\n                  name=\"feedbackApp\"\n                  id=\"about-options\"\n                  data-testid=\"about-options\"\n                  label={aboutLabel}\n                  options={aboutOptions}\n                />\n              )}\n              <Field\n                type=\"textarea\"\n                name=\"feedback\"\n                label={(active && active.label) || 'Feedback? Requests? Defects?'}\n                style={fieldStyles}\n                rows=\"2\"\n              />\n              {additionalComments && (\n                <Field\n                  type=\"textarea\"\n                  name=\"additionalFeedback\"\n                  label=\"Additional Comments... (Optional)\"\n                  style={fieldStyles}\n                  rows=\"2\"\n                />\n              )}\n            </>\n          ) : null}\n        </ModalBody>\n\n        <ModalFooter>\n          {showSupport ? (\n            <>\n              <span className=\"d-none d-md-block\" style={inlineStyles}>\n                Need Help?\n              </span>\n              <Button\n                className=\"pl-0\"\n                onClick={() => setSupportIsActive(true)}\n                color=\"link\"\n                type=\"button\"\n                onKeyDown={({ keyCode }) => keyCode === 13 && setSupportIsActive(true)}\n              >\n                Open a support ticket\n              </Button>\n            </>\n          ) : null}\n\n          {onClose ? (\n            <Button onClick={onClose} color=\"secondary\" onKeyDown={({ keyCode }) => keyCode === 13 && onClose()}>\n              Close\n            </Button>\n          ) : null}\n\n          <Button type=\"submit\" color=\"primary\" disabled={!active}>\n            Send Feedback\n          </Button>\n        </ModalFooter>\n      </Form>\n    </>\n  );\n};\n\nFeedbackForm.propTypes = {\n  name: PropTypes.string.isRequired,\n  onFeedbackSent: PropTypes.func,\n  faceOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      icon: PropTypes.string,\n      description: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ),\n  aboutOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    })\n  ),\n  aboutLabel: PropTypes.node,\n  onClose: PropTypes.func,\n  prompt: PropTypes.string,\n  additionalComments: PropTypes.bool,\n  staticFields: PropTypes.object,\n  modalHeaderProps: PropTypes.shape({ ...ModalHeader.propTypes }),\n  analytics: PropTypes.shape({\n    info: PropTypes.func.isRequired,\n  }),\n  showSupport: PropTypes.bool,\n  setSupportIsActive: PropTypes.func,\n  autoFocusFeedbackButton: PropTypes.bool,\n};\n\nFeedbackForm.defaultProps = {\n  aboutOptions: [],\n  aboutLabel: 'This is about',\n  additionalComments: false,\n  modalHeaderProps: {},\n  analytics: avLogMessagesApi,\n  showSupport: false,\n};\n\nexport default FeedbackForm;\n","// Copied from https://github.com/Availity/sdk-js/blob/master/packages/native-form/flattenObject.js\nconst parseValue = value => value === undefined || value === null ? value : value.toString();\n\nconst flattenObject = ob =>\n  Object.keys(ob).reduce((toReturn, k) => {\n    if (Object.prototype.toString.call(ob[k]) === '[object Date]') {\n      toReturn[k] = ob[k].toJSON();\n    } else if (ob[k] && typeof ob[k] === 'object') {\n      const flatObject = flattenObject(ob[k]);\n      const isArray = Array.isArray(ob[k]);\n\n      for (const k2 of Object.keys(flatObject)) {\n        toReturn[\n          `${k}${isArray ? k2.replace(/^(\\d+)(\\..*)?/, '[$1]$2') : `.${k2}`}`\n        ] = parseValue(flatObject[k2]);\n      }\n    } else {\n      toReturn[k] = parseValue(ob[k]);\n    }\n\n    return toReturn;\n  }, {});\n\nexport default flattenObject;\n","import flattenObject from './flattenObject';\n\nconst required = field => {\n  throw new Error(`${field} is required and was not provided`);\n};\n\nexport default (\n  spaceId = required('spaceId'),\n  params = {},\n  formAttributes = {},\n  type = 'saml'\n) => {\n  const mergedOptions = {\n    method: 'post',\n    action: `/ms/api/availity/internal/spc/magneto/sso/v1/${type}/${spaceId}`,\n    target: '_blank',\n    ...formAttributes,\n  };\n  const form = document.createElement('form');\n  for (const key of Object.keys(mergedOptions)) {\n    form.setAttribute(key, mergedOptions[key]);\n  }\n  const flat = flattenObject(params);\n  const fields = Object.keys(flat)\n    .map(key => {\n      const name = key.replace(/\\[\\d+]/g, '[]');\n      const value = flat[key];\n      return `<input type=\"hidden\" name=\"${name}\" value=\"${value}\" />`;\n    })\n    .join('');\n\n  form.insertAdjacentHTML('beforeend', fields);\n  // eslint-disable-next-line unicorn/prefer-node-append\n  document.body.appendChild(form);\n  form.submit();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\nimport { Form } from '@availity/form';\nimport { AvOrganizationSelect } from '@availity/select/resources';\nimport * as yup from 'yup';\nimport nativeForm from '@availity/native-form';\nimport { avOrganizationsApi, avWebQLApi } from '@availity/api-axios';\nimport '@availity/yup';\n\nconst SUPPORT_PERMISSION_ID = '7205';\n\nconst ORG_VALIDATION_MESSAGE = 'Please select an organization from the dropdown.';\n\nconst getToken = () => document.cookie.replace(/(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*=\\s*([^;]*).*$)|^.*$/, '$1');\n\nconst openSupport = async (values, setBlocking, setSupportIsActive, feedbackToggle) => {\n  setBlocking(true);\n  const orgsResp = await avOrganizationsApi.getOrganizations(SUPPORT_PERMISSION_ID);\n  let salesforceResponse;\n  if (orgsResp.data.organizations.some((org) => org.id === values.organization.id)) {\n    salesforceResponse = await avWebQLApi.create({\n      query: `\n        query salesforceUser($organizationId: ID!) {\n          salesforceUser(organizationId: $organizationId) {\n            id\n            accountId\n            newCommunity\n          }\n        }\n      `,\n      variables: {\n        organizationId: values.organization.id,\n      },\n    });\n  }\n\n  let href = 'mailto:support@availity.com';\n  const target = '_top';\n\n  if (!salesforceResponse || !salesforceResponse.data) {\n    window.open(href, target);\n  }\n\n  const salesforceData = salesforceResponse.data.data.salesforceUser;\n  const ssoId = 'BJx3fqX3BH';\n  const newCommutySsoId = 'E-t_s_JQ0P';\n\n  if (salesforceData) {\n    const attributes = {\n      orgGenKey: values.organization.customerId,\n      organizationName: values.organization.name,\n      partyId: values.organization.id,\n      payerId: 'AVAILITY',\n      X_Client_ID: '5430d59f-c5cc-4be7-be5a-34472ec30fe9',\n      X_XSRF_TOKEN: getToken(),\n    };\n\n    if (salesforceData.id && salesforceData.accountId) {\n      attributes.avSalesForceContactId = salesforceData.id;\n      attributes.avSalesForceContactAccId = salesforceData.accountId;\n    }\n\n    href = `/ms/api/availity/internal/spc/magneto/sso/v1/saml/${salesforceData.newCommunity ? newCommutySsoId : ssoId}`;\n\n    nativeForm(ssoId, attributes, { action: href, target: '_blank' });\n    setBlocking(false);\n  } else {\n    window.open(href, target);\n  }\n  setSupportIsActive(false);\n  feedbackToggle(false);\n};\n\nfunction orgSelectTest(msg) {\n  const orgSelectSchema = yup.object().shape({\n    id: yup.string().isRequired(true, ORG_VALIDATION_MESSAGE),\n    name: yup.string().isRequired(true, ORG_VALIDATION_MESSAGE),\n  });\n\n  return this.test({\n    name: 'orgSelectTest',\n    exclusive: true,\n    message: msg || 'This field is invalid.',\n    async test(componentValue) {\n      if (!componentValue) return true;\n\n      const valid = await orgSelectSchema.isValid(componentValue);\n      return valid;\n    },\n  });\n}\n\nyup.addMethod(yup.object, 'orgSelectTest', orgSelectTest);\n\nconst SupportForm = ({ setSupportIsActive, setBlocking, feedbackToggle }) => (\n  <>\n    <ModalHeader id=\"support-form-header\" role=\"heading\" aria-level=\"2\" className=\"h5\" tag=\"div\">\n      Open Support Ticket\n    </ModalHeader>\n    <Form\n      aria-label=\"Support Form\"\n      aria-describedby=\"support-form-header\"\n      role=\"form\"\n      data-testid=\"support-form\"\n      initialValues={{\n        organization: undefined,\n      }}\n      validationSchema={yup.object({\n        organization: yup\n          .object()\n          .orgSelectTest(ORG_VALIDATION_MESSAGE)\n          .isRequired(ORG_VALIDATION_MESSAGE)\n          .typeError(ORG_VALIDATION_MESSAGE),\n      })}\n      onSubmit={(values) => openSupport(values, setBlocking, setSupportIsActive, feedbackToggle)}\n    >\n      <ModalBody>\n        <AvOrganizationSelect\n          name=\"organization\"\n          label=\"Select an Organization\"\n          data-testid=\"org-dropdown\"\n          getResult={(data) => data.organizations}\n        />\n      </ModalBody>\n\n      <ModalFooter>\n        <Button\n          onClick={() => setSupportIsActive(false)}\n          color=\"secondary\"\n          type=\"button\"\n          onKeyDown={({ keyCode }) => keyCode === 13 && setSupportIsActive(false)}\n        >\n          Close\n        </Button>\n\n        <Button data-testid=\"submit-btn\" type=\"submit\" color=\"primary\">\n          Continue\n        </Button>\n      </ModalFooter>\n    </Form>\n  </>\n);\n\nSupportForm.propTypes = {\n  setSupportIsActive: PropTypes.func,\n  setBlocking: PropTypes.func,\n  feedbackToggle: PropTypes.func,\n};\n\nexport default SupportForm;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'reactstrap';\nimport BlockUi from 'react-block-ui';\nimport 'react-block-ui/style.css';\n\nimport SupportForm from './SupportForm';\n\nconst SupportModal = ({ supportIsActive, toggle, supportZIndex, setSupportIsActive, feedbackToggle }) => {\n  const [blocking, setBlocking] = useState(null);\n\n  return (\n    <Modal\n      fade\n      id=\"supportModal\"\n      data-testid=\"supportModal\"\n      aria-labelledby=\"support-form-header\"\n      isOpen={supportIsActive}\n      toggle={toggle}\n      zIndex={supportZIndex}\n    >\n      <BlockUi tag=\"div\" blocking={blocking}>\n        <SupportForm\n          setSupportIsActive={setSupportIsActive}\n          setBlocking={setBlocking}\n          feedbackToggle={feedbackToggle}\n        />\n      </BlockUi>\n    </Modal>\n  );\n};\n\nSupportModal.propTypes = {\n  supportIsActive: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n  supportZIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  setSupportIsActive: PropTypes.func,\n  feedbackToggle: PropTypes.func,\n};\n\nexport default SupportModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownMenu } from 'reactstrap';\nimport BlockUi from 'react-block-ui';\nimport 'react-block-ui/style.css';\n\nimport SupportForm from './SupportForm';\n\nconst dropdownStyles = { width: '550px', maxWidth: '90vw', padding: 0 };\n\nconst SupportDropdown = ({ setSupportIsActive, feedbackToggle }) => {\n  const [blocking, setBlocking] = useState(null);\n\n  return (\n    <DropdownMenu\n      right\n      style={dropdownStyles}\n      positionFixed=\"false\"\n      role=\"dialog\"\n      aria-labelledby=\"support-form-header\"\n    >\n      <BlockUi tag=\"div\" keepInView blocking={blocking}>\n        <SupportForm\n          setSupportIsActive={setSupportIsActive}\n          setBlocking={setBlocking}\n          feedbackToggle={feedbackToggle}\n        />\n      </BlockUi>\n    </DropdownMenu>\n  );\n};\n\nSupportDropdown.propTypes = {\n  setSupportIsActive: PropTypes.func,\n  feedbackToggle: PropTypes.func,\n};\n\nexport default SupportDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownMenu } from 'reactstrap';\nimport FeedbackForm from './FeedbackForm';\nimport SupportModal from './SupportModal';\nimport SupportDropdown from './SupportDropdown';\n\nconst dropdownStyles = { width: '550px', maxWidth: '90vw', padding: 0 };\n\nconst FeedbackDropdown = ({\n  prompt,\n  toggle,\n  onFeedbackSent,\n  showSupport,\n  supportToggle,\n  supportZIndex,\n  modal,\n  feedbackToggle,\n  ...formProps\n}) => {\n  const [supportIsActive, setSupportIsActive] = React.useState(false);\n\n  let support = null;\n  if (supportIsActive) {\n    support = modal ? (\n      <SupportModal\n        toggle={supportToggle}\n        isOpen={supportIsActive}\n        setSupportIsActive={setSupportIsActive}\n        supportZIndex={supportZIndex}\n        feedbackToggle={feedbackToggle}\n      />\n    ) : (\n      <SupportDropdown toggle={supportToggle} setSupportIsActive={setSupportIsActive} feedbackToggle={feedbackToggle} />\n    );\n  }\n\n  const toRender = support || (\n    <FeedbackForm\n      onFeedbackSent={onFeedbackSent}\n      prompt={prompt}\n      onClose={toggle}\n      showSupport={showSupport}\n      setSupportIsActive={setSupportIsActive}\n      {...formProps}\n    />\n  );\n\n  return (\n    <DropdownMenu right style={dropdownStyles} role=\"dialog\" aria-labelledby=\"feedback-form-header\" aria-modal=\"false\">\n      {toRender}\n    </DropdownMenu>\n  );\n};\n\nFeedbackDropdown.propTypes = {\n  prompt: PropTypes.string,\n  toggle: PropTypes.func,\n  onFeedbackSent: PropTypes.func,\n  showSupport: PropTypes.bool,\n  supportToggle: PropTypes.func,\n  supportZIndex: PropTypes.string,\n  modal: PropTypes.bool,\n  feedbackToggle: PropTypes.func,\n};\n\nexport default FeedbackDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal } from 'reactstrap';\nimport FeedbackForm from './FeedbackForm';\nimport SupportModal from './SupportModal';\n\nconst FeedbackModal = ({ isOpen, toggle, zIndex, showSupport, supportZIndex, feedbackToggle, ...formOptions }) => {\n  const [supportIsActive, setSupportIsActive] = React.useState(false);\n\n  return supportIsActive ? (\n    <SupportModal\n      supportIsActive={supportIsActive}\n      setSupportIsActive={setSupportIsActive}\n      zIndex={supportZIndex}\n      toggle={toggle}\n      feedbackToggle={feedbackToggle}\n    />\n  ) : (\n    <Modal\n      fade\n      id=\"feedbackModal\"\n      data-testid=\"feedbackModal\"\n      size=\"lg\"\n      aria-labelledby=\"feedback-form-header\"\n      isOpen={isOpen && !supportIsActive}\n      toggle={toggle}\n      zIndex={zIndex}\n    >\n      <FeedbackForm\n        onClose={toggle}\n        showSupport={showSupport}\n        setSupportIsActive={setSupportIsActive}\n        {...formOptions}\n      />\n    </Modal>\n  );\n};\n\nFeedbackModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n  showSupport: PropTypes.bool,\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  supportZIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  feedbackToggle: PropTypes.func,\n};\n\nexport default FeedbackModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, DropdownToggle } from 'reactstrap';\nimport { avLogMessagesApi } from '@availity/api-axios';\nimport { useToggle } from '@availity/hooks';\nimport FeedbackDropdown from './FeedbackDropdown';\nimport FeedbackModal from './FeedbackModal';\n\nconst Feedback = ({\n  appName,\n  modal,\n  zIndex,\n  supportZIndex,\n  children,\n  analytics,\n  className,\n  outline,\n  color,\n  formProps,\n  prompt,\n  onFeedbackSent,\n  showSupport,\n  ...props\n}) => {\n  const [feedbackIsOpen, feedbackToggle] = useToggle(false);\n\n  return (\n    <Dropdown\n      isOpen={feedbackIsOpen && !modal}\n      toggle={() => feedbackToggle()}\n      className={`${className} hidden-print`}\n      {...props}\n    >\n      <DropdownToggle color={color} outline={outline}>\n        {children || showSupport ? 'Feedback & Support' : 'Give Feedback'}\n      </DropdownToggle>\n      {modal ? (\n        <FeedbackModal\n          onFeedbackSent={onFeedbackSent}\n          prompt={prompt}\n          isOpen={feedbackIsOpen}\n          zIndex={zIndex}\n          toggle={() => feedbackToggle()}\n          name={appName}\n          analytics={analytics}\n          showSupport={showSupport}\n          supportZIndex={supportZIndex}\n          feedbackToggle={feedbackToggle}\n          {...formProps}\n        />\n      ) : (\n        <FeedbackDropdown\n          onFeedbackSent={onFeedbackSent}\n          feedbackToggle={feedbackToggle}\n          prompt={prompt}\n          analytics={analytics}\n          toggle={() => feedbackToggle()}\n          name={appName}\n          showSupport={showSupport}\n          supportZIndex={supportZIndex}\n          modal={modal}\n          {...formProps}\n        />\n      )}\n    </Dropdown>\n  );\n};\n\nFeedback.propTypes = {\n  appName: PropTypes.string,\n  modal: PropTypes.bool,\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  supportZIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  outline: PropTypes.bool,\n  color: PropTypes.string,\n  formProps: PropTypes.object,\n  prompt: PropTypes.string,\n  onFeedbackSent: PropTypes.func,\n  analytics: PropTypes.shape({\n    info: PropTypes.func.isRequired,\n  }),\n  showSupport: PropTypes.bool,\n};\n\nFeedback.defaultProps = {\n  modal: false,\n  color: 'secondary',\n  analytics: avLogMessagesApi,\n  showSupport: false,\n};\n\nexport default Feedback;\n"],"sourceRoot":""}