{"version":3,"sources":["webpack:///../packages/feedback/src/FeedbackButton.js","webpack:///../packages/feedback/src/SmileField.js","webpack:///../packages/feedback/src/FeedbackForm.js"],"names":["btnStyles","fontSize","padding","iconStyles","margin","FeedbackButton","onClick","icon","active","children","iconSize","rest","Button","style","color","onKeyDown","keyCode","name","size","className","propTypes","PropTypes","func","string","node","defaultProps","flex","SmileField","options","onChange","autoFocusFeedbackButton","value","useField","setFieldValue","useFormikContext","map","option","i","autoFocus","description","isRequired","arrayOf","shape","label","bool","yup","format","msg","this","test","exclusive","message","undefined","fieldStyles","resize","inlineStyles","display","FeedbackForm","onClose","faceOptions","aboutOptions","aboutLabel","onFeedbackSent","prompt","additionalComments","staticFields","analytics","modalHeaderProps","showSupport","setSupportIsActive","formProps","useState","setActive","sent","setSent","sendFeedback","smileField","values","avRegionsApi","getCurrentRegion","response","info","surveyId","replace","smileLocation","smile","url","window","location","href","region","data","regions","id","userAgent","navigator","submitTime","Date","useEffect","setTimeout","Object","keys","forEach","key","ModalHeader","role","tabIndex","tag","initialValues","additionalFeedback","feedback","feedbackApp","validationSchema","max","required","length","onSubmit","ModalBody","FormGroup","type","rows","ModalFooter","disabled","oneOfType","number","object","avLogMessagesApi"],"mappings":"q5DAKA,IAAMA,UAAY,CAAEC,SAAU,QAASC,QAAS,aAC1CC,WAAa,CAAEC,OAAQ,OAEvBC,8BAAiB,SAAjBA,eAAkB,MAAD,IAAGC,SAAH,KAAGA,QAASC,KAAZ,KAAYA,KAAMC,OAAlB,KAAkBA,OAAQC,SAA1B,KAA0BA,SAAUC,SAApC,KAAoCA,SAAaC,KAAjD,gDACrB,yBAACC,OAAA,EAAD,eACEC,MAAOb,UACPc,MAAON,SAAWD,KAAO,UAAY,QACrC,eAAcC,SAAWD,KACzBD,QAAS,mBACPA,SAAQC,OAEVQ,UAAW,iCAA6B,KAA7B,MAAGC,SAAgCV,SAAQC,QAClDI,KARN,WAUE,wBAAC,sBAAD,CAAM,cAAY,gBAAgBM,KAAMV,KAAMW,KAAMR,SAAUG,MAAOV,aACrE,gCAAMgB,UAAU,UAAhB,SAA2BV,gBAZzBJ,8B,6BAgBNA,8BAAee,UAAY,CACzBd,QAASe,qBAAUC,KACnBf,KAAMc,qBAAUE,OAChBf,OAAQa,qBAAUE,OAClBd,SAAUY,qBAAUG,KACpBd,SAAUW,qBAAUE,QAGtBlB,8BAAeoB,aAAe,CAC5Bf,SAAU,I,8aAGGL,qD,67CC/Bf,IAAML,qBAAY,CAAE0B,KAAM,EAAGtB,OAAQ,aAE/BuB,sBAAa,SAAbA,WAAc,MAAyD,IAAvDV,KAAuD,KAAvDA,KAAMW,QAAiD,KAAjDA,QAASC,SAAwC,KAAxCA,SAAUC,wBAA8B,KAA9BA,wBACpCC,MAAT,eAAoBC,qBAASf,MAA7B,MAASc,MACDE,cAAkBC,uBAAlBD,cAER,OAAOL,QAAQO,KAAI,SAACC,OAAQC,GAAT,OACjB,wBAAC,mBAAD,CACEC,UAAiB,IAAND,GAAWP,wBACtBjB,MAAOb,qBAEPO,KAAM6B,OAAO7B,KACbG,SAAS,KACTqB,MAAOK,OACP5B,OAAQuB,OAASA,MAAMxB,KACvBD,QAAS,mBACP2B,cAAchB,KAAMmB,QAChBP,UACFA,SAASO,SAXf,SAeGA,OAAOG,aAZHH,OAAO7B,UAiBlBoB,sBAAWP,UAAY,CACrBH,KAAMI,qBAAUE,OAAOiB,WACvBZ,QAASP,qBAAUoB,QACjBpB,qBAAUqB,MAAM,CACdnC,KAAMc,qBAAUE,OAChBgB,YAAalB,qBAAUE,OACvBoB,MAAOtB,qBAAUE,UAGrBM,SAAUR,qBAAUC,KACpBQ,wBAAyBT,qBAAUuB,MAGrCjB,sBAAWF,aAAe,CACxBG,QAAS,CACP,CACErB,KAAM,QACNgC,YAAa,cACbI,MAAO,qBAET,CACEpC,KAAM,MACNgC,YAAa,WACbI,MAAO,2BAET,CACEpC,KAAM,QACNgC,YAAa,cACbI,MAAO,yBAGXb,yBAAyB,GAGZH,yC,45ECzDfkB,KAAcA,KAAY,cAAc,SAASC,OAAON,WAAYO,KAClE,OAAOC,KAAKC,KAAK,CACfhC,KAAM,YACNiC,WAAW,EACXC,QAASJ,KAAO,0BAChBE,KAJe,cAIVlB,OACH,OAAIS,iBACeY,IAAVrB,YAOf,IAAMsB,YAAc,CAAEC,OAAQ,QACxBC,aAAe,CAAEC,QAAS,eAAgBpD,OAAQ,GAElDqD,0BAAe,SAAfA,aAAgB,MAgBhB,IAfJxC,KAeI,KAfJA,KACAyC,QAcI,KAdJA,QACAC,YAaI,KAbJA,YACAC,aAYI,KAZJA,aACAC,WAWI,KAXJA,WACAC,eAUI,KAVJA,eACAC,OASI,KATJA,OACAC,mBAQI,KARJA,mBACAC,aAOI,KAPJA,aACAC,UAMI,KANJA,UACAC,iBAKI,KALJA,iBACAC,YAII,KAJJA,YACAC,mBAGI,KAHJA,mBACAvC,wBAEI,KAFJA,wBACGwC,UACC,iEACJ,sCAA4BC,uBAAS,MAArC,GAAO/D,OAAP,cAAegE,UAAf,cACA,sCAAwBD,uBAAS,MAAjC,GAAOE,KAAP,cAAaC,QAAb,cAEMC,aAAY,qB,qVAAA,0BAAG,4KAASC,WAAT,MAASA,WAAeC,OAAxB,uEACIC,MAAaC,mBADjB,cACbC,SADa,8BAGbd,UAAUe,KAAV,eACJC,SAAajE,KAAKkE,QAAQ,MAAO,KAAzB,gBACRC,cAAe,GAAGnE,KAClBoE,MAAO,QAAQT,WAAWrE,KAC1B+E,IAAKC,OAAOC,SAASC,KACrBC,OAAQV,SAASW,KAAKC,QAAQ,IAAMZ,SAASW,KAAKC,QAAQ,GAAGC,GAC7DC,UAAWP,OAAOQ,UAAUD,UAC5BE,WAAY,IAAIC,MACbpB,OACAZ,eAZc,OAenBS,QAAQG,QAfW,wDAAH,gBAAZF,aAAY,2CAsClB,OAnBAuB,yBAAU,WACJzB,MACF0B,YAAW,WACLzC,SACFA,UAEEI,iBACFsC,OAAOC,KAAK5B,MAAM6B,SAAQ,SAACC,KAAD,YAAuBnD,IAAdqB,KAAK8B,aAA6B9B,KAAK8B,QAE1EzC,eAAe,OAAD,QACZtD,OAAQA,OAAOD,MACZkE,UAGN,OAGJ,CAACA,OAEGA,KACL,wBAAC+B,YAAA,EAAD,eACEC,KAAK,SACLZ,GAAG,uBACHa,SAAS,IACTvF,UAAU,iCACNgD,iBALN,4CAUA,yDACE,wBAACqC,YAAA,EAAD,eACEX,GAAG,uBACHY,KAAK,UACL,aAAW,IACXtF,UAAU,KACVwF,IAAI,OACAxC,iBANN,UAQGJ,QAAU,gCAAgC9C,QAE7C,yBAAC,gBAAD,eACE,aAAW,gBACX,mBAAiB,uBACjBwF,KAAK,OACL1F,UAAW,iCAA6B,KAA7B,MAAGC,SAAgC0C,WAC9C,cAAY,gBACZkD,cAAe,CACb,oBAAgBxD,EAChByD,wBAAoBzD,EACpB0D,cAAU1D,EACV2D,iBAAa3D,EACbwB,gBAAYxB,GAEd4D,iBAAkBnE,OAAaH,MAAM,CACnCoE,SAAUjE,OAAaoE,IAAI,IAAK,0CAA0CC,SAAS,2BACnFL,mBAAoBhE,OAAaoE,IAAI,IAAK,qDAC1CrC,WAAY/B,OAETH,MAAM,CACLnC,KAAMsC,OAAaqE,WACnB3E,YAAaM,OACbF,MAAOE,SAERqE,SAAS,2BACZH,YAAalE,OAAaL,WAAWoB,aAAauD,OAAS,EAAG,8BAE5D7C,UA1BN,CA2BE8C,SAAU,kBAACvC,QAAD,OAAYF,aAAaE,SA3BrC,UA6BE,yBAACwC,UAAA,EAAD,WACE,wBAACC,UAAA,EAAD,CACEpG,KAAK,KACL2E,GAAG,eACHY,KAAK,QACL,kBAAgB,uBAChB,cAAY,eACZtF,UAAU,0CANZ,SAQE,wBAAC,eAAD,CACES,QAAS+B,YACT1C,KAAK,aACLY,SAAU,kBAACO,QAAD,OAAYoC,UAAUpC,SAChCN,wBAAyBA,4BAG5BtB,OACC,yDACGoD,aAAauD,OAAS,GACrB,wBAAC,kBAAD,CACElG,KAAK,cACL4E,GAAG,gBACH,cAAY,gBACZlD,MAAOkB,WACPjC,QAASgC,eAGb,wBAAC,gBAAD,CACE2D,KAAK,WACLtG,KAAK,WACL0B,MAAQnC,QAAUA,OAAOmC,OAAU,+BACnC9B,MAAOwC,YACPmE,KAAK,MAENxD,oBACC,wBAAC,gBAAD,CACEuD,KAAK,WACLtG,KAAK,qBACL0B,MAAM,oCACN9B,MAAOwC,YACPmE,KAAK,SAIT,QAGN,yBAACC,YAAA,EAAD,WACGrD,YACC,yDACE,gCAAMjD,UAAU,oBAAoBN,MAAO0C,aAA3C,wBAGA,wBAAC3C,OAAA,EAAD,CACEO,UAAU,OACVb,QAAS,0BAAM+D,oBAAmB,IAClCvD,MAAM,OACNyG,KAAK,SACLxG,UAAW,iCAA6B,KAA7B,MAAGC,SAAgCqD,oBAAmB,IALnE,sCAUA,KAEHX,QACC,wBAAC9C,OAAA,EAAD,CAAQN,QAASoD,QAAS5C,MAAM,YAAYC,UAAW,iCAA6B,KAA7B,MAAGC,SAAgC0C,WAA1F,mBAGE,KAEJ,wBAAC9C,OAAA,EAAD,CAAQ2G,KAAK,SAASzG,MAAM,UAAU4G,UAAWlH,OAAjD,sCASViD,0BAAarC,UAAY,CACvBH,KAAMI,qBAAUE,OAAOiB,WACvBsB,eAAgBzC,qBAAUC,KAC1BqC,YAAatC,qBAAUoB,QACrBpB,qBAAUqB,MAAM,CACdnC,KAAMc,qBAAUE,OAChBgB,YAAalB,qBAAUE,OACvBoB,MAAOtB,qBAAUE,UAGrBqC,aAAcvC,qBAAUoB,QACtBpB,qBAAUqB,MAAM,CACdzB,KAAMI,qBAAUE,OAChBQ,MAAOV,qBAAUsG,UAAU,CAACtG,qBAAUE,OAAQF,qBAAUuG,YAG5D/D,WAAYxC,qBAAUG,KACtBkC,QAASrC,qBAAUC,KACnByC,OAAQ1C,qBAAUE,OAClByC,mBAAoB3C,qBAAUuB,KAC9BqB,aAAc5C,qBAAUwG,OACxB1D,iBAAkB9C,qBAAUqB,MAAV,iBAAqB8D,cAAYpF,YACnD8C,UAAW7C,qBAAUqB,MAAM,CACzBuC,KAAM5D,qBAAUC,KAAKkB,aAEvB4B,YAAa/C,qBAAUuB,KACvByB,mBAAoBhD,qBAAUC,KAC9BQ,wBAAyBT,qBAAUuB,MAGrCa,0BAAahC,aAAe,CAC1BmC,aAAc,GACdC,WAAY,gBACZG,oBAAoB,EACpBG,iBAAkB,GAClBD,UAAW4D,MACX1D,aAAa,G,ihDAGAX,sD","file":"18.eb9f97c5.iframe.bundle.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Button } from 'reactstrap';\nimport Icon from '@availity/icon';\n\nconst btnStyles = { fontSize: '1.4em', padding: '.2em .4em' };\nconst iconStyles = { margin: '0px' };\n\nconst FeedbackButton = ({ onClick, icon, active, children, iconSize, ...rest }) => (\n  <Button\n    style={btnStyles}\n    color={active === icon ? 'primary' : 'light'}\n    aria-pressed={active === icon}\n    onClick={() => {\n      onClick(icon);\n    }}\n    onKeyDown={({ keyCode }) => keyCode === 13 && onClick(icon)}\n    {...rest}\n  >\n    <Icon data-testid=\"feedback-icon\" name={icon} size={iconSize} style={iconStyles} />\n    <span className=\"sr-only\">{children}</span>\n  </Button>\n);\n\nFeedbackButton.propTypes = {\n  onClick: PropTypes.func,\n  icon: PropTypes.string,\n  active: PropTypes.string,\n  children: PropTypes.node,\n  iconSize: PropTypes.string,\n};\n\nFeedbackButton.defaultProps = {\n  iconSize: '',\n};\n\nexport default FeedbackButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useField, useFormikContext } from 'formik';\nimport FeedbackButton from './FeedbackButton';\n\nconst btnStyles = { flex: 1, margin: '0 2% 0 2%' };\n\nconst SmileField = ({ name, options, onChange, autoFocusFeedbackButton }) => {\n  const [{ value }] = useField(name);\n  const { setFieldValue } = useFormikContext();\n\n  return options.map((option, i) => (\n    <FeedbackButton\n      autoFocus={i === 0 && autoFocusFeedbackButton}\n      style={btnStyles}\n      key={option.icon}\n      icon={option.icon}\n      iconSize=\"2x\"\n      value={option}\n      active={value && value.icon}\n      onClick={() => {\n        setFieldValue(name, option);\n        if (onChange) {\n          onChange(option);\n        }\n      }}\n    >\n      {option.description}\n    </FeedbackButton>\n  ));\n};\n\nSmileField.propTypes = {\n  name: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      icon: PropTypes.string,\n      description: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ),\n  onChange: PropTypes.func,\n  autoFocusFeedbackButton: PropTypes.bool,\n};\n\nSmileField.defaultProps = {\n  options: [\n    {\n      icon: 'smile',\n      description: 'Smiley face',\n      label: 'What do you like?',\n    },\n    {\n      icon: 'meh',\n      description: 'Meh face',\n      label: 'What would you improve?',\n    },\n    {\n      icon: 'frown',\n      description: 'Frowny face',\n      label: \"What don't you like?\",\n    },\n  ],\n  autoFocusFeedbackButton: true,\n};\n\nexport default SmileField;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ModalBody, ModalHeader, ModalFooter, FormGroup } from 'reactstrap';\nimport { avLogMessagesApi, avRegionsApi } from '@availity/api-axios';\nimport { Form, Field } from '@availity/form';\nimport { SelectField } from '@availity/select';\nimport * as yup from 'yup';\nimport SmileField from './SmileField';\n\nyup.addMethod(yup.string, 'isRequired', function format(isRequired, msg) {\n  return this.test({\n    name: 'dateRange',\n    exclusive: true,\n    message: msg || 'This field is required.',\n    test(value) {\n      if (isRequired) {\n        return value !== undefined;\n      }\n      return true;\n    },\n  });\n});\n\nconst fieldStyles = { resize: 'none' };\nconst inlineStyles = { display: 'inline-block', margin: 0 };\n\nconst FeedbackForm = ({\n  name,\n  onClose,\n  faceOptions,\n  aboutOptions,\n  aboutLabel,\n  onFeedbackSent,\n  prompt,\n  additionalComments,\n  staticFields,\n  analytics,\n  modalHeaderProps,\n  showSupport,\n  setSupportIsActive,\n  autoFocusFeedbackButton,\n  ...formProps\n}) => {\n  const [active, setActive] = useState(null);\n  const [sent, setSent] = useState(null);\n\n  const sendFeedback = async ({ smileField, ...values }) => {\n    const response = await avRegionsApi.getCurrentRegion();\n\n    await analytics.info({\n      surveyId: `${name.replace(/\\s/g, '_')}_Smile_Survey`,\n      smileLocation: `${name}`,\n      smile: `icon-${smileField.icon}`,\n      url: window.location.href,\n      region: response.data.regions[0] && response.data.regions[0].id,\n      userAgent: window.navigator.userAgent,\n      submitTime: new Date(),\n      ...values, // Spread the form values onto the logger\n      ...staticFields, // Spread the static key value pairs onto the logger\n    });\n\n    setSent(values);\n  };\n\n  // Close the Modal once sent after 2 seconds\n  useEffect(() => {\n    if (sent) {\n      setTimeout(() => {\n        if (onClose) {\n          onClose(); // Mostly for Screen Reader use but a nice to have for all\n        }\n        if (onFeedbackSent) {\n          Object.keys(sent).forEach((key) => sent[key] === undefined && delete sent[key]);\n\n          onFeedbackSent({\n            active: active.icon,\n            ...sent,\n          });\n        }\n      }, 2000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sent]);\n\n  return sent ? (\n    <ModalHeader\n      role=\"status\"\n      id=\"feedback-form-header\"\n      tabIndex=\"0\"\n      className=\"d-flex justify-content-center\"\n      {...modalHeaderProps}\n    >\n      Thank you for your feedback.\n    </ModalHeader>\n  ) : (\n    <>\n      <ModalHeader\n        id=\"feedback-form-header\"\n        role=\"heading\"\n        aria-level=\"2\"\n        className=\"h5\"\n        tag=\"div\"\n        {...modalHeaderProps}\n      >\n        {prompt || `Tell us what you think about ${name}`}\n      </ModalHeader>\n      <Form\n        aria-label=\"Feedback Form\"\n        aria-describedby=\"feedback-form-header\"\n        role=\"form\"\n        onKeyDown={({ keyCode }) => keyCode === 27 && onClose()}\n        data-testid=\"feedback-form\"\n        initialValues={{\n          'face-options': undefined,\n          additionalFeedback: undefined,\n          feedback: undefined,\n          feedbackApp: undefined,\n          smileField: undefined,\n        }}\n        validationSchema={yup.object().shape({\n          feedback: yup.string().max(200, 'Feedback cannot exceed 200 characters.').required('This field is required.'),\n          additionalFeedback: yup.string().max(200, 'Additional Feedback cannot exceed 200 characters.'),\n          smileField: yup\n            .object()\n            .shape({\n              icon: yup.string().required(),\n              description: yup.string(),\n              label: yup.string(),\n            })\n            .required('This field is required.'),\n          feedbackApp: yup.string().isRequired(aboutOptions.length > 0, 'This field is required.'),\n        })}\n        {...formProps}\n        onSubmit={(values) => sendFeedback(values)}\n      >\n        <ModalBody>\n          <FormGroup\n            size=\"lg\"\n            id=\"face-options\"\n            role=\"group\"\n            aria-labelledby=\"feedback-form-header\"\n            data-testid=\"face-options\"\n            className=\"d-flex flex-row justify-content-between\"\n          >\n            <SmileField\n              options={faceOptions}\n              name=\"smileField\"\n              onChange={(option) => setActive(option)}\n              autoFocusFeedbackButton={autoFocusFeedbackButton}\n            />\n          </FormGroup>\n          {active ? (\n            <>\n              {aboutOptions.length > 0 && (\n                <SelectField\n                  name=\"feedbackApp\"\n                  id=\"about-options\"\n                  data-testid=\"about-options\"\n                  label={aboutLabel}\n                  options={aboutOptions}\n                />\n              )}\n              <Field\n                type=\"textarea\"\n                name=\"feedback\"\n                label={(active && active.label) || 'Feedback? Requests? Defects?'}\n                style={fieldStyles}\n                rows=\"2\"\n              />\n              {additionalComments && (\n                <Field\n                  type=\"textarea\"\n                  name=\"additionalFeedback\"\n                  label=\"Additional Comments... (Optional)\"\n                  style={fieldStyles}\n                  rows=\"2\"\n                />\n              )}\n            </>\n          ) : null}\n        </ModalBody>\n\n        <ModalFooter>\n          {showSupport ? (\n            <>\n              <span className=\"d-none d-md-block\" style={inlineStyles}>\n                Need Help?\n              </span>\n              <Button\n                className=\"pl-0\"\n                onClick={() => setSupportIsActive(true)}\n                color=\"link\"\n                type=\"button\"\n                onKeyDown={({ keyCode }) => keyCode === 13 && setSupportIsActive(true)}\n              >\n                Open a support ticket\n              </Button>\n            </>\n          ) : null}\n\n          {onClose ? (\n            <Button onClick={onClose} color=\"secondary\" onKeyDown={({ keyCode }) => keyCode === 13 && onClose()}>\n              Close\n            </Button>\n          ) : null}\n\n          <Button type=\"submit\" color=\"primary\" disabled={!active}>\n            Send Feedback\n          </Button>\n        </ModalFooter>\n      </Form>\n    </>\n  );\n};\n\nFeedbackForm.propTypes = {\n  name: PropTypes.string.isRequired,\n  onFeedbackSent: PropTypes.func,\n  faceOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      icon: PropTypes.string,\n      description: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ),\n  aboutOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    })\n  ),\n  aboutLabel: PropTypes.node,\n  onClose: PropTypes.func,\n  prompt: PropTypes.string,\n  additionalComments: PropTypes.bool,\n  staticFields: PropTypes.object,\n  modalHeaderProps: PropTypes.shape({ ...ModalHeader.propTypes }),\n  analytics: PropTypes.shape({\n    info: PropTypes.func.isRequired,\n  }),\n  showSupport: PropTypes.bool,\n  setSupportIsActive: PropTypes.func,\n  autoFocusFeedbackButton: PropTypes.bool,\n};\n\nFeedbackForm.defaultProps = {\n  aboutOptions: [],\n  aboutLabel: 'This is about',\n  additionalComments: false,\n  modalHeaderProps: {},\n  analytics: avLogMessagesApi,\n  showSupport: false,\n};\n\nexport default FeedbackForm;\n"],"sourceRoot":""}