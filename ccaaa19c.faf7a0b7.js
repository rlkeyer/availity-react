(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{150:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(168)),o=["components"],l={title:"Feature"},s={unversionedId:"components/feature",id:"components/feature",isDocsHomePage:!1,title:"Feature",description:"Check environment features for the current environment to determine if a particular feature is enabled.",source:"@site/docs/components/feature.mdx",slug:"/components/feature",permalink:"/availity-react/components/feature",editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/feature.mdx",version:"current",sidebar:"someSidebar",previous:{title:"useFavorites",permalink:"/availity-react/components/favorites/hook"},next:{title:"Getting Started",permalink:"/availity-react/components/feedback/index"}},b=[{value:"Installation",id:"installation",children:[]},{value:"Example",id:"example",children:[]},{value:"Props",id:"props",children:[]},{value:"<code>isFeatureEnabled</code>",id:"isfeatureenabled",children:[]},{value:"`generate-features-json (CLI)",id:"generate-features-json-cli",children:[]},{value:"features.json",id:"featuresjson",children:[]}],c={toc:b};function p(e){var t=e.components,n=Object(r.a)(e,o);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Check environment features for the current environment to determine if a particular feature is enabled."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@availity/feature"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@availity/feature.svg?style=for-the-badge",alt:"Version"}))),Object(i.b)("p",null,"Note: Only works with OpenShift deployed applications using the standard pipeline"),Object(i.b)("h3",{id:"installation"},"Installation"),Object(i.b)("p",null,"npm"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npm install @availity/feature axios --save\n")),Object(i.b)("p",null,"Yarn"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"yarn add @availity/feature axios\n")),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Feature from '@availity/feature';\n\nconst Example = () => (\n  <Feature\n    features={[\n      'AV-1234',\n      'AV-2345',\n      ['AV-3456', 'AV-4567'],\n      ['AV-5678', 'AV-6789'],\n    ]}\n  >\n    {/* stuff to render if the feature indicated\n      above is enabled in the environment */}\n  </Feature>\n);\n")),Object(i.b)("h4",{id:"live-example--storybook"},"Live example: ",Object(i.b)("a",{href:"https://availity.github.io/availity-react/storybook/?path=/story/components-feature--default"}," Storybook")),Object(i.b)("p",null,"Component which validates the environment's features to determine if children content should be shown."),Object(i.b)("h3",{id:"props"},"Props"),Object(i.b)("h4",{id:"features-string--string--string"},Object(i.b)("inlineCode",{parentName:"h4"},"features: string | string[] | string[][]")),Object(i.b)("p",null,"Can either be a string, eg: ",Object(i.b)("inlineCode",{parentName:"p"},'"AV-1234"')," or an array containing feature ID strings as well as other arrays which contain feature ID strings, eg: ",Object(i.b)("inlineCode",{parentName:"p"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"),". The items in a nested array indicate feature IDs that must ",Object(i.b)("em",{parentName:"p"},"all")," be enabled for a feature to be considered enabled (see ",Object(i.b)("inlineCode",{parentName:"p"},"children"),') - they act as "AND". The items in the top of the array act as "OR" - if ',Object(i.b)("em",{parentName:"p"},"any")," are enabled, the feature is considered enabled. The example ",Object(i.b)("inlineCode",{parentName:"p"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]")," is similar to ",Object(i.b)("inlineCode",{parentName:"p"},"'AV-1234' OR 'AV-2345' OR ('AV-3456' && 'AV-4567') OR ('AV-5678' && 'AV-6789')"),"."),Object(i.b)("h4",{id:"loader-boolean--reactnode"},Object(i.b)("inlineCode",{parentName:"h4"},"loader?: boolean | ReactNode")),Object(i.b)("p",null,"When ",Object(i.b)("inlineCode",{parentName:"p"},"true"),", ",Object(i.b)("inlineCode",{parentName:"p"},"BlockUi")," is used when loading the features. When a ",Object(i.b)("inlineCode",{parentName:"p"},"node"),", that node is rendered instead of ",Object(i.b)("inlineCode",{parentName:"p"},"BlockUi")," when loading the features. When ",Object(i.b)("inlineCode",{parentName:"p"},"false"),", nothing is rendered when loading the features. ",Object(i.b)("strong",{parentName:"p"},"Default:")," ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("h4",{id:"whendisabled-reactnode"},Object(i.b)("inlineCode",{parentName:"h4"},"whenDisabled?: ReactNode")),Object(i.b)("p",null,"The content that renders when the features are disabled."),Object(i.b)("h4",{id:"children-reactnode"},Object(i.b)("inlineCode",{parentName:"h4"},"children?: ReactNode")),Object(i.b)("p",null,"The content that renders when the features are enabled."),Object(i.b)("h4",{id:"negate-boolean"},Object(i.b)("inlineCode",{parentName:"h4"},"negate?: boolean")),Object(i.b)("p",null,"Negate the feature. If the feature specified is enabled, it acts as if it were disabled (by rendering the ",Object(i.b)("inlineCode",{parentName:"p"},"whenDisabled")," prop content). If the feature specified is disabled, it acts as if it were enabled (by rendering the ",Object(i.b)("inlineCode",{parentName:"p"},"children")," prop content)."),Object(i.b)("h3",{id:"isfeatureenabled"},Object(i.b)("inlineCode",{parentName:"h3"},"isFeatureEnabled")),Object(i.b)("p",null,"Function that validates the environment's features to determine if children content should be shown."),Object(i.b)("h4",{id:"arguments"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"features")),": String, or an array containing strings. Required.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"string"),": The feature ID, eg: ",Object(i.b)("inlineCode",{parentName:"li"},"'AV-1234'")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"array"),": The array can contain feature ID strings as well as other arrays which contain feature ID strings, eg: ",Object(i.b)("inlineCode",{parentName:"li"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"),". The items in a nested array indicate feature IDs that must ",Object(i.b)("em",{parentName:"li"},"all")," be enabled for a feature to be considered enabled (see ",Object(i.b)("inlineCode",{parentName:"li"},"children"),') - they act as "AND". The items in the top of the array act as "OR" - if ',Object(i.b)("em",{parentName:"li"},"any")," are enabled, the feature is considered enabled. The example ",Object(i.b)("inlineCode",{parentName:"li"},"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]")," is similar to ",Object(i.b)("inlineCode",{parentName:"li"},"'AV-1234' || 'AV-2345' || ('AV-3456' && 'AV-4567') || ('AV-5678' && 'AV-6789')"),".")))),Object(i.b)("h4",{id:"returns"},"Returns"),Object(i.b)("p",null,"A promise that can be awaited and resolves to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," or ",Object(i.b)("inlineCode",{parentName:"p"},"false")," indicating whether the feature(s) are enabled or not."),Object(i.b)("h4",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { isFeatureEnabled } from '@availity/feature';\n\nasync () => {\n  const enabled = await isFeatureEnabled('AV-1234');\n  if (!enabled) return;\n  // do stuff, this feature is enabled!\n};\n")),Object(i.b)("h3",{id:"generate-features-json-cli"},"`generate-features-json (CLI)"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"generate-features-json")," is a CLI tool that takes a ",Object(i.b)("inlineCode",{parentName:"p"},"features.json")," file and outputs environment specific ",Object(i.b)("inlineCode",{parentName:"p"},"features.json")," files to be used depending on which environment it's currently in. Note: This is where OpenShift comes into play. OpenShift ensures the right file (based on the ENV) is placed in the right location when the pod starts."),Object(i.b)("h4",{id:"arguments-1"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"path-to-features.json")),": Directory path or file location. Optional. Default: ",Object(i.b)("inlineCode",{parentName:"li"},"project/config/features.json"),". If a directory path, a ",Object(i.b)("inlineCode",{parentName:"li"},"features.json")," file must exist in the directory. If a file location, it must be a ",Object(i.b)("inlineCode",{parentName:"li"},".json")," file. Note: Follow the example ",Object(i.b)("inlineCode",{parentName:"li"},"features.json")," file for what the contents of the file should be."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"path-to-build-dist")),": Directory path. Optional. Default: if ",Object(i.b)("inlineCode",{parentName:"li"},"NODE_ENV"),' is "production" ',Object(i.b)("inlineCode",{parentName:"li"},"dist/features"),", else ",Object(i.b)("inlineCode",{parentName:"li"},"build/features"),". The location to output the various environment specific JSON files. Note: OpenShift is looking for the ",Object(i.b)("inlineCode",{parentName:"li"},"features")," directory in the web root of the image, so if this value is changed, ensure that the resulting image has the ",Object(i.b)("inlineCode",{parentName:"li"},"features")," directory.")),Object(i.b)("h4",{id:"usage-1"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"generate-features-json\ngenerate-features-json ./features.json\ngenerate-features-json other-path dist/features\n")),Object(i.b)("h4",{id:"as-npm-script"},"As npm script"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "build": "av build && generate-features-json"\n  }\n}\n')),Object(i.b)("p",null,"with extra parameters"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "build": "av build && generate-features-json ./features.json"\n  }\n}\n')),Object(i.b)("h3",{id:"featuresjson"},"features.json"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"features.json"),' file is a single file that details "features" and the environments that each feature is ',Object(i.b)("strong",{parentName:"p"},"disabled")," in. Typically, the name of the feature is the JIRA ticket number that the feature was developed for. This helps identify what the feature does by just knowing the name.\nPossible ",Object(i.b)("inlineCode",{parentName:"p"},"disabledEnvironments")," values are ",Object(i.b)("inlineCode",{parentName:"p"},'"DEV"'),", ",Object(i.b)("inlineCode",{parentName:"p"},'"STAGE"'),", and ",Object(i.b)("inlineCode",{parentName:"p"},'"PRD"'),". These values line up with the ",Object(i.b)("inlineCode",{parentName:"p"},"ENV")," environment variable within OpenShift."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "PREC-4597",\n    "description": "https://jira.availity.com:8443/browse/PREC-4597",\n    "disabledEnvironments": ["PRD"]\n  },\n  {\n    "name": "CB-675",\n    "description": "https://jira.availity.com:8443/browse/PREC-4597",\n    "disabledEnvironments": ["STAGE", "PRD"]\n  }\n]\n')),Object(i.b)("p",null,"The environment specific ",Object(i.b)("inlineCode",{parentName:"p"},"features.json")," files that get generated are a simple array of disabled feature names. The above example produces a ",Object(i.b)("inlineCode",{parentName:"p"},"PRD.json")," with ",Object(i.b)("inlineCode",{parentName:"p"},'["PREC-4597", "CB-675"]')," and ",Object(i.b)("inlineCode",{parentName:"p"},"STAGE.json")," with ",Object(i.b)("inlineCode",{parentName:"p"},'["CB-675"]'),"."),Object(i.b)("p",null,"Enabling and disabling features does require a deployment, but with the OpenShift CI/CD process, that ",Object(i.b)("em",{parentName:"p"},"should")," be painless."))}p.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),c=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return n?r.a.createElement(m,l(l({ref:t},b),{},{components:n})):r.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);