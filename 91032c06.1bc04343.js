(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{126:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return b}));var o=t(3),r=t(7),a=(t(0),t(168)),i=["components"],p={title:"<Phone />"},l={unversionedId:"form/phone/components/phone",id:"form/phone/components/phone",isDocsHomePage:!1,title:"<Phone />",description:"Availity Phone component using Formik and Yup",source:"@site/docs/form/phone/components/phone.md",slug:"/form/phone/components/phone",permalink:"/availity-react/form/phone/components/phone",editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/phone/components/phone.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/availity-react/form/phone/index"},next:{title:"validatePhone",permalink:"/availity-react/form/phone/components/validate-phone"}},s=[{value:"Example",id:"example",children:[]},{value:"Props",id:"props",children:[]},{value:"Lazy Loading and Suspense",id:"lazy-loading-and-suspense",children:[]}],c={toc:s};function b(e){var n=e.components,t=Object(r.a)(e,i);return Object(a.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Availity Phone component using Formik and Yup"),Object(a.b)("h3",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form } from '@availity/form';\nimport { Phone, validatePhone } from '@availity/phone';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      phone: '',\n      ext: '',\n    }}\n    onSubmit={(values) => alert(JSON.stringify(values))}\n    validationSchema={yup.object({\n      phone: yup.string().validatePhone().isRequired(true),\n      ext: yup.string(),\n    })}\n  >\n    <Phone\n      name=\"phone\"\n      label=\"Phone\"\n      country=\"US\"\n      showExtension={true}\n      phoneColProps={{ xs: { size: 9 } }}\n      extProps={{\n        name: 'ext',\n        label: 'Ext.',\n        extColProps: {\n          xs: { size: 3 },\n        },\n      }}\n    />\n    <Button type=\"submit\" color=\"primary\">\n      Submit\n    </Button>\n  </Form>\n);\n")),Object(a.b)("h4",{id:"live-example--storybook"},"Live example: ",Object(a.b)("a",{href:"https://availity.github.io/availity-react/storybook/?path=/story/formik-phone--default"}," Storybook")),Object(a.b)("h3",{id:"props"},"Props"),Object(a.b)("h4",{id:"name-string"},Object(a.b)("inlineCode",{parentName:"h4"},"name: string")),Object(a.b)("p",null,"Identifies the field and matches the validation schema."),Object(a.b)("h4",{id:"label-string"},Object(a.b)("inlineCode",{parentName:"h4"},"label?: string")),Object(a.b)("p",null,"Displays a Reactstrap ",Object(a.b)("inlineCode",{parentName:"p"},"<Label />")," for the field."),Object(a.b)("h4",{id:"country-string"},Object(a.b)("inlineCode",{parentName:"h4"},"country?: string")),Object(a.b)("p",null,"Default country for parsing national numbers. This is the ",Object(a.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"},"two letter ISO country code"),". If no code is provided, the default is ",Object(a.b)("inlineCode",{parentName:"p"},"'US'"),"."),Object(a.b)("h4",{id:"showextension-boolean"},Object(a.b)("inlineCode",{parentName:"h4"},"showExtension?: boolean")),Object(a.b)("p",null,"Enable the phone extension field. This is ",Object(a.b)("inlineCode",{parentName:"p"},"false")," by default."),Object(a.b)("h4",{id:"extprops-object"},Object(a.b)("inlineCode",{parentName:"h4"},"extProps?: object")),Object(a.b)("p",null,"Used to pass props to the extension field when it is enabled."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"extProps: {\n  name: '',\n  label: '',\n  extColProps: {},\n}\n")),Object(a.b)("h4",{id:"phonecolprops-object"},Object(a.b)("inlineCode",{parentName:"h4"},"phoneColProps?: object")),Object(a.b)("p",null,"Used to control props on the ",Object(a.b)("inlineCode",{parentName:"p"},"<Col />")," for the phone field, if needed. The phone column defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"xs: { size: 12 }")," when not rendering an extension field, and defaults to ",Object(a.b)("inlineCode",{parentName:"p"},"xs: { size: 10 }")," when rendering an extension field."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"phoneColProps: {\n  xs: {\n    size: 9;\n  },\n\n  sm: {\n    size: 10;\n  }\n}\n")),Object(a.b)("h4",{id:"extcolprops-object"},Object(a.b)("inlineCode",{parentName:"h4"},"extColProps?: object")),Object(a.b)("p",null,"Used to control props on ",Object(a.b)("inlineCode",{parentName:"p"},"<Col />")," for the extension field, if needed. The extension column has no default size value, so it's default will effectively be ",Object(a.b)("inlineCode",{parentName:"p"},"size: { 12 - phoneColSize }")," unless otherwise specified."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"extColProps: {\n  xs: {\n    size: 3;\n  },\n\n  sm: {\n    size: 2;\n  }\n}\n")),Object(a.b)("h4",{id:"restphoneprops--restextprops"},Object(a.b)("inlineCode",{parentName:"h4"},"restPhoneProps")," & ",Object(a.b)("inlineCode",{parentName:"h4"},"restExtProps")),Object(a.b)("p",null,"These are respectively spread onto the corresponding ",Object(a.b)("inlineCode",{parentName:"p"},"@availity/form")," ",Object(a.b)("inlineCode",{parentName:"p"},"<Field />")," components, so props like ",Object(a.b)("inlineCode",{parentName:"p"},"grid")," can be used on the phone and extension fields."),Object(a.b)("h3",{id:"lazy-loading-and-suspense"},"Lazy Loading and Suspense"),Object(a.b)("p",null,"Because ",Object(a.b)("inlineCode",{parentName:"p"},"libphonenumber-js")," has a relatively large package size, it is recommended that ",Object(a.b)("a",{parentName:"p",href:"https://reactjs.org/docs/code-splitting.html#reactlazy"},"lazy loading and suspense")," are utilized with this component. This will give your app the benefit of Code-Splitting, and the bundle containing ",Object(a.b)("inlineCode",{parentName:"p"},"libphonenumber-js")," and the ",Object(a.b)("inlineCode",{parentName:"p"},"<Phone />")," component will be loaded automatically when the component is first rendered. While the component is being loaded, a ",Object(a.b)("inlineCode",{parentName:"p"},"fallback")," component will be rendered to show the user some placeholder content in the meantime."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx"},"import React, { Suspense } from 'react';\n\nconst Phone = React.lazy(() => import('./Phone'));\n\nfunction MyApp() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Phone />\n      </Suspense>\n    </div>\n  );\n}\n")))}b.isMDXComponent=!0},168:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),c=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},b=function(e){var n=c(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=c(t),m=o,u=b["".concat(i,".").concat(m)]||b[m]||d[m]||a;return t?r.a.createElement(u,p(p({ref:n},s),{},{components:t})):r.a.createElement(u,p({ref:n},s))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);