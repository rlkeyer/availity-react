(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return m})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),i=(n(0),n(168)),o=["components"],p={title:"Migrating from reactstrap validation"},l={unversionedId:"form/migrating",id:"form/migrating",isDocsHomePage:!1,title:"Migrating from reactstrap validation",description:"The primary difference in developing with availity-reactstrap-validation and @availity/form is validation. With availity-reactstrap-validation, we define validation schemas on the input components in the form with the validate prop, like so:",source:"@site/docs/form/migrating.md",slug:"/form/migrating",permalink:"/availity-react/form/migrating",editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/migrating.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/availity-react/form/index"},next:{title:"<CheckboxGroup />",permalink:"/availity-react/form/components/checkbox-group"}},m=[{value:"Form with <code>availity-reactstrap-validation</code>",id:"form-with-availity-reactstrap-validation",children:[]},{value:"Equivalent Form with <code>@availity/form</code>",id:"equivalent-form-with-availityform",children:[]}],c={toc:m};function d(e){var t=e.components,n=Object(a.a)(e,o);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The primary difference in developing with ",Object(i.b)("inlineCode",{parentName:"p"},"availity-reactstrap-validation")," and ",Object(i.b)("inlineCode",{parentName:"p"},"@availity/form")," is validation. With ",Object(i.b)("inlineCode",{parentName:"p"},"availity-reactstrap-validation"),", we define validation schemas on the input components in the form with the ",Object(i.b)("inlineCode",{parentName:"p"},"validate")," prop, like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { AvInput, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm>\n      <AvInput\n        name=\"myInput\"\n        type=\"text\"\n        validate={{\n          required: {\n            value: true,\n            errorMessage: 'This field is required.',\n          },\n        }}\n      />\n    </AvForm>\n  );\n};\n")),Object(i.b)("p",null,"Note: ",Object(i.b)("inlineCode",{parentName:"p"},"availity-reactstrap-validation")," also has a ",Object(i.b)("inlineCode",{parentName:"p"},"required")," prop that acts as a shorthand for required validation using the ",Object(i.b)("inlineCode",{parentName:"p"},"validate")," prop. The code snippet above is equivalent to:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { AvInput, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm>\n      <AvInput name=\"myInput\" type=\"text\" required />\n    </AvForm>\n  );\n};\n")),Object(i.b)("p",null,"With ",Object(i.b)("inlineCode",{parentName:"p"},"@availity/form"),", we use ",Object(i.b)("inlineCode",{parentName:"p"},"yup")," and ",Object(i.b)("inlineCode",{parentName:"p"},"@availity/yup")," to define the validation schema for all of the inputs in the form on the ",Object(i.b)("inlineCode",{parentName:"p"},"<Form />")," component with the ",Object(i.b)("inlineCode",{parentName:"p"},"validationSchema")," prop from ",Object(i.b)("a",{parentName:"p",href:"https://jaredpalmer.com/formik/docs/guides/validation#validationschema"},"formik"),", like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Input, Form } from '@availity/form';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => {\n  return (\n    <Form\n      initialValues={{ myInput: '' }}\n      validationSchema={yup.object().shape({\n        myInput: yup.string().isRequired(true, 'This field is required.'),\n      })}\n    >\n      <Input name=\"myInput\" type=\"text\" />\n    </Form>\n  );\n};\n")),Object(i.b)("p",null,"Another key difference is we define the initial state of the inputs in the form with the ",Object(i.b)("inlineCode",{parentName:"p"},"initialValues")," prop from ",Object(i.b)("a",{parentName:"p",href:"https://jaredpalmer.com/formik/docs/api/formik#initialvalues-values"},"formik")," on the ",Object(i.b)("inlineCode",{parentName:"p"},"<Form />")," component."),Object(i.b)("h2",{id:"form-with-availity-reactstrap-validation"},"Form with ",Object(i.b)("inlineCode",{parentName:"h2"},"availity-reactstrap-validation")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { AvField, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm onValidSubmit={() => {}}>\n      <AvField\n        name=\"memberId\"\n        type=\"text\"\n        label=\"Member ID\"\n        validate={{\n          pattern: {\n            value: 'd{8}',\n            errorMessage: 'Member ID must be 8 digits',\n          },\n          required: {\n            value: true,\n            errorMessage: 'This Field is Required.',\n          },\n        }}\n      />\n      <AvField\n        name=\"zipCode\"\n        type=\"text\"\n        label=\"Zip Code\"\n        validate={{\n          pattern: {\n            value: '^d{5}(?:-d{4})?$',\n            errorMessage: 'Valid Zip Code Formats: 12345 or 12345-6789',\n          },\n          required: {\n            value: true,\n            errorMessage: 'This Field is Required.',\n          },\n        }}\n      />\n    </AvForm>\n  );\n};\n")),Object(i.b)("h2",{id:"equivalent-form-with-availityform"},"Equivalent Form with ",Object(i.b)("inlineCode",{parentName:"h2"},"@availity/form")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Field, Form } from '@availity/form';\nimport '@availity/yup';\nimport * as yup from 'yup';\n\nconst Example = () => {\n  return (\n    <Form\n      onSubmit={() => {}}\n      initialValues={{\n        memberId: '',\n        zipCode: '',\n      }}\n      validationSchema={yup.object().shape({\n        memberId: yup\n          .string()\n          .isRequired(true, 'This Field is Required.')\n          .matches(/^\\d{8}$/, 'Member ID must be 8 digits.'),\n        zipCode: yup\n          .string()\n          .isRequired(true, 'This Field is Required.')\n          .matches(\n            /^\\d{5}(?:-\\d{4})?$/,\n            'Valid Zip Code Formats: 12345 or 12345-6789'\n          ),\n      })}\n    >\n      <Field name=\"memberId\" type=\"text\" label=\"Member ID\" />\n      <Field name=\"zipCode\" type=\"text\" label=\"Zip Code\" />\n    </Form>\n  );\n};\n")))}d.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=a.a.createContext({}),c=function(e){var t=a.a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=c(e.components);return a.a.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},s=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(n),s=r,b=d["".concat(o,".").concat(s)]||d[s]||u[s]||i;return n?a.a.createElement(b,p(p({ref:t},m),{},{components:n})):a.a.createElement(b,p({ref:t},m))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=s;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var m=2;m<i;m++)o[m]=n[m];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);